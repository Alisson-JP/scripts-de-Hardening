#!/bin/bash

# ------- Go Ahead IT - São Paulo - Brasil -------
# ------- Equipe SG / Engenharia Go Ahead IT -----
# ------- Todos os direitos reservados -----------

# --- Script criado por Alisson Pereira --- #
# --- Revisado por Gustavo Leite ---------- #
# --- Aprovado por Vinicius Silva --------- #

# Verificação dos pacotes/serviços existentes
# relacionando com os pacotes que o CIS Control recomenda verificar
# Center for Internet Security - CentOS Linux 7 Benchmark – v3.1.2 – 31/08/2021


#---------------------------------------------------------------------------------------------------#
#--------------------------------------Considerações Iniciais---------------------------------------#
# a primeira linha [ #!/bin/bash ] é OBRIGATÓRIA, nela está a informação de onde o scrip será rodado
# Crie um documento com vi, vim, nano ou outro editor de preferênca
# insira todo esse conteúdo dentro do documento criado
# será necessário adicionar permissão executável para o o documento criado
# chmod 755 nomeDoScript
# após permissão adicionada, o documento passa a ser, de fato, um script
# para verificar a permissão de execução concedida, pode-se fazê-lo com o comando
# ls -la
# para executá-lo, coloque o endereço completo a partir da pasta origem,
# ou "./" se estiver na pasta destino
# exemplo 
# /home/script.sh                  ou, se estiver no diretório /home
# /home> ./script.sh
# para não precisar colocar o endereço completo todas as vezes, é necessário incluí-lo
# no endereçamento PATH
# echo $PATH
# export PATH=$PATH:directory


# A tabela abaixo [ Cores ] modifica a formatação de cor original do texto
# para utilizar deve-se inserir os valores de formatação em variáveis
# e chamar a variável antes do texto que se pretende modificar
# [ ${nomeDaCorDesejada} ]
# as chaves {} entre a variável protege o conteúdo e a própria variável de cor

#------------------Cores-------------------#
red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
purple='\033[1;35m'
white='\033[1;37m'
#------------------------------------------#


# Iremos automatizar a criação de um novo documento sempre que o script for executado
# utilizando a data como forma de diferenciação
# esse doc [ log_list_date ] receberá todas as informações desse script

# o comando [ date ] será apresentado utilizando a máscara: dia (%d), mês (%m), e assim por diante
# será criando então, no diretório [ /home/ajp ] o arquivo com o nome supracitado
# o comando [ ls -t | head -1 ] busca na pasta/diretório o nome do último arquivo criado
# a variável [ doc 1 ] receberá o nome do último arquivo criado, uma vez que será o nome + a data e hora de execução


#-------------Criação de log file----------#
arq=`date +%d%m%y%H%M`					
touch /home/ajp > "log_list_$arq"
doc1=`ls -t | head -1`
#------------------------------------------#


# no caso acima, o arquivo que receberá as informações do script é chamdado de log_list + a data e hora atual
# a data e hora será inserida automaticamente ao executar o script
# o prefixo do nome do documento ( log_list ) pode ser alterado conforme necessário, alterando-o na linha 65


# será criado duas variáveis para receber o resultado adquirido de cada comando pelo script
# na prática, para cada teste, se o teste retornar positivo, será adicionado 1 em [ okay ]
# em contrapartida, será adicionado 1 em [ verificar ] sempre que o resultado retornar negativo


#--------- Status de Verificação ----------#
okay=0
verificar=0
#------------------------------------------#


# abaixo, segue a senha escolhida para rodar o script, assim que solicitado
# a senha faz alusão a Go Ahead + Hardening + 7 mil linhas

#------------Senha para executar o script-----------#
senha_de_acesso=ghdHard@7kl							# essa senha pode ser alterada ( após o símbolo de = )
#---------------------------------------------------#

# Início
# limpe a tela
clear

echo -e "${green}------- Go Ahead IT - São Paulo - Brasil -------${white}"
echo -e "${green}------- Equipe SG / Engenharia Go Ahead IT -----${white}"
echo -e "${green}------- Todos os direitos reservados -----------${white}"

# peça o nome do usuário, crie uma variável para receber esse nome e
# imprima na tela esse pedido de identificação
echo
printf "Digite seu nome: "
read nome1
# variável [ $nome1 ] foi criada
# envie para o arquivo log [ $doc1 ] a informação obtida
echo "" >> $doc1
# a linha acima serve para pular uma linha no arquivo de log
echo "O usuário $nome1 iniciou o processo." >> $doc1


# peça a senha, armazena essa senha recebida em uma variável
# para que a digitação da senha não apareça na tela, ou seja, modo silencioso, utilize o "-s"
printf "Digite a senha: "
read -s senha1
# a variável [ $senha1 ] foi criada
# limpe a tela após receber a senha
clear

# confira a senha usando condicionais (if, then, else)
if [ $senha1 = $senha_de_acesso ];			# if = se
then										# then = então
	echo -e "${green}Autenticação confirmada!${white}"
	sleep 2
else										# else = senão
	echo -e "${red}Falha na autenticação!${white}"
	sleep 2									# sleep = tempo de descanso até o próximo comando
	exit 1
fi											# fi = "if" ao contrário, serve para indicar onde a condicional termina

# o parâmetro -e em [ echo -e ] serve para adicionar os carateres especiais, 
# quanto para adicionar as formatações de cores


# mostre uma mensagem de processo iniciando
echo 
echo -e "${yellow}Starting..."
echo
sleep 2
echo -e "${blue}Reading all system..."
echo
sleep 2
echo -e "${green}Ready!${white}"
echo

# uma linha com o comando echo vazio, irá pular uma linha na tela, para melhorar a visualização

# Monitorando o sistema
# mostre na tela que será feito uma varredura de informações sobre o sistema
echo "Iniciando coleta de informações sobre o sistema..."
# envie para o log o aviso de início
echo "" >> $doc1
echo "Iniciado varredura de informações do sistema." >> $doc1
sleep 2
# o comando [ sleep ] retém o script pelo tempo escolhido, até a executar a próxima linha


# versão do servidor
echo
versao_server=`uname -m`
echo -n -e "O sistema opera atualmente com a versão ${purple}$versao_server${white}"
# o parâmetro [ -n ] na linha echo, serve para não pular de linha e ativar o próximo comando
echo "" >> $doc1
echo "Sistema atual: $versao_server" >> $doc1
sleep 3
echo


# pesquise quem é o usuário e mostre na tela
echo
user_logado=`whoami`
echo -n -e "O usuário logado no momento é ${purple}$user_logado${white}"
echo "" >> $doc1
echo "O usuário fez a checagem logado como: $user_logado" >> $doc1
sleep 3


# pesquise quando a distro foi instalada
echo
data_de_insta=`ls -lct /etc | tail -1 | awk '{print $6, $7, $8}'`
# criada variável [ data_de_insta ] contendo a informação
echo
echo -n "Essa distribuição foi instalada em: "
echo -e "${purple}$data_de_insta${white}"
echo "" >> $doc1
echo "Data de instalação dessa distribuição: " >> $doc1
echo "$data_de_insta" >> $doc1
sleep 3


# status de memória
echo
status_de_memoria=`free -m`
echo "Status atual de memória livre "
echo -e "${purple}$status_de_memoria${white}"
echo "" >> $doc1
echo "Status de memória livre: " >> $doc1
echo "$status_de_memoria" >> $doc1
sleep 3


# status de uso de disco e suas partições
echo
status_uso_de_disco=`df -h`
echo "Status do uso de disco e partições: "
echo -e "${purple}$status_uso_de_disco${white}"
echo "" >> $doc1
echo "Status do uso de disco e partições: " >> $doc1
echo "$status_uso_de_disco" >> $doc1
sleep 3


# status do tempo que a máquina está rodando
echo
status_tempo_running=`uptime`
echo "O sistema está rodando há:"
echo -e "${purple}$status_tempo_running${white}"
echo "" >> $doc1
echo "O sistema está rodando há:" >> $doc1
echo "$status_tempo_running" >> $doc1
sleep 3


# mostre uma mensagem de término de coleta das informações iniciais, apresentando o usuário
echo
echo "$nome1, as informações iniciais necessárias foram coletadas."
echo "" >> $doc1
echo "As informações iniciais necessárias foram coletadas." >> $doc1
echo "" >> $doc1


# criar um loop para retornar a pergunta inicial, caso a resposta seja inválida
# esse loop será a função [ quest1 ]; caso a resposta seja inválida, o script irá chamar
# a função, reiniciando o loop (linha 283)

function quest1 {
	echo "Deseja prosseguir? [ s / n ]"
	read -n 1 -s resp1
		case $resp1 in
			S|s)
				echo -e "${green}Iniciando Etapa 1.${white}"
				;;
			N|n)
				echo -e "${red}Processo interrompido.${white}"
				sleep 3
				exit 1
				;;
			*)
				echo -e "${yellow}Opção inválida. Digite [ s ] para prosseguir e [ n ] para sair.${white}"
				sleep 2
				clear
				quest1
				;;
		esac
}

# verificar a opção digitada pelo usuário
# abaixo temos o case, que é uma ferramenta de comparação, ou seja, caso a resposta seja...
# a sintaxe do case é diferenciada, exige dois [ ;; ] entre uma comparação e outra
# o case finaliza com a palavra case ao contrário [ esac ]

# pergunte ao usuário se deseja prosseguir
echo "Deseja prosseguir com o Hardening [s/n]?"
read -n 1 -s resp1
# criado a variável [ $resp1 ]

case $resp1 in
	S|s)
	echo
	echo -e "${green}Iniciando Etapa 1.${white}"
	echo
	;;
	N|n)
	echo
	echo -e "${red}Processo interrompido.${white}"
	sleep 3
	exit 1
	;;
	*)
	echo -e "${yellow}Opção inválida. Digite [ s ] para prosseguir e [ n ] para sair. ${white}"
	sleep 2
	clear
	quest1
	;;
esac


#exemplo de condicional a seguir
## 
## v1_ =` `								# o comando em uma variável precisa estar entre crases [ ` ]
## if [ "$v1_ " == "" ]; then			# duplo == significa equivalência
##	  echo " v1 okay"
##	  echo "" >> $doc1					# duplo >> irá adicionar novas linhas no destino, e não substituí-las
##	  echo " okay" >> $doc1
## else
##	  echo " Verificar  v1" >> $doc1
## fi


#----------------------------------------------------------------------------------------------------#
#---------------------------------------Funcionalidade do script-------------------------------------#
# v1 = testar a primeira condição, segundo o CIS Control
# v2 = testar a segunda condição, segundo o CIS Control, e assim por diante (v3, v4, etc...)
# [ "$?" ] corresponde ao valor do último comando executado, onde:
# [ "$?" == 0 ] significa que o comando retornou com o resultado verdadeiro/instalado/enable, etc;
# [ "$?" == 1 ] significa que o comando retornou com o resultado falso/não instalado/ não ativado, etc;
# [ "$?" == 2 ] significa que o comando retornou com o resultado de erro, ou alguma condição especial


echo "1. Verificação das Configurações iniciais do sistema." >> $doc1
echo "" >> $doc1
echo -e "${yellow}1. Verificação das Configurações iniciais do sistema.${white}"
sleep 5
echo


# 1.1.1.1 Certifique-se de que a montagem cramfs esteja desabilitada nos arquivos do sistemas
echo "1.1.1.1 Certifique-se de que a montagem cramfs esteja desabilitada nos arquivos do sistemas" >> $doc1
echo -e "${yellow}1.1.1.1${white} Certifique-se de que a montagem cramfs esteja desabilitada nos arquivos do sistemas"
v1_cramfs=`modprobe -n -v cramfs | egrep -E "(cramfs|install)\s+/bin/true"`
if [ $? -eq 0 ]; then
	echo "1.1.1.1 v1_cramfs okay" >> $doc1
	echo -e "${green}v1_cramfs okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.1.1 Verificar v1_cramfs" >> $doc1
	echo -e "${red}1.1.1.1 Verificar v1_cramfs${white}"
	verificar=$((verificar + 1))
fi

v2_cramfs=`lsmod | grep cramfs`
if [ $? -eq 1 ]; then
	echo "1.1.1.1 v2_cramfs okay" >> $doc1
	echo -e "${green}v2_cramfs okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.1.1 Verificar v2_cramfs" >> $doc1
	echo -e "${red}1.1.1.1 Verificar v2_cramfs${white}"
		verificar=$((verificar + 1))
fi

echo


# 1.1.1.2 Certifique-se de que a montagem squashfs esteja desabilitada nos arquivos do sistema
echo "" >> $doc1
echo "1.1.1.2 Certifique-se de que a montagem squashfs esteja desabilitada nos arquivos do sistema" >> $doc1
echo -e "${yellow}1.1.1.2${white} Certifique-se de que a montagem squashfs esteja desabilitada nos arquivos do sistema"
v1_squashfs=`modprobe -n -v squashfs | egrep -E "(squashfs|install)\s+/bin/true"`
if [ $? -eq 0 ]; then
	echo "1.1.1.2 v1_squashfs okay" >> $doc1
	echo -e "${green}v1_squashfs okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.1.2 Verificar v1_squashfs" >> $doc1
	echo -e "${red}1.1.1.2 Verificar v1_squashfs${white}"
	verificar=$((verificar + 1))
fi

v2_squashfs=`lsmod | grep squashfs`
if [ $? -eq 1 ]; then
	echo "1.1.1.2 v2_squashfs okay" >> $doc1
	echo -e "${green}v2_squashfs okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.1.2 Verificar v2_squashfs" >> $doc1
	echo -e "${red}1.1.1.2 Verificar v2_squashfs${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.1.3 Certifique-se de que a montagem udf esteja desabilitada nos arquivos do sistema
echo "" >> $doc1
echo "1.1.1.3 Certifique-se de que a montagem udf esteja desabilitada nos arquivos do sistema" >> $doc1
echo -e "${yellow}1.1.1.3${white} Certifique-se de que a montagem udf esteja desabilitada nos arquivos do sistema"
v1_udf=`modprobe -n -v udf | grep -E "(udf|install)\s+/bin/true"`
if [ $? -eq 0 ]; then
	echo "1.1.1.3 v1_udf okay" >> $doc1
	echo -e "${green}v1_udf okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.1.3 Verificar v1_udf" >> $doc1
	echo -e "${red}1.1.1.3 Verificar v1_udf${white}"
	verificar=$((verificar + 1))
fi

v2_udf=`lsmod | grep udf`
if [ $? -eq 1 ]; then
	echo "1.1.1.3 v2_udf okay" >> $doc1
	echo -e "${green}v2_udf okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.1.3 Verificar v2_udf" >> $doc1
	echo -e "${red}1.1.1.3 Verificar v2_udf${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.2 Certifique-se de que /tmp esteja configurado
echo "" >> $doc1
echo "1.1.2 Certifique-se de que /tmp esteja configurado" >> $doc1
echo -e "${yellow}1.1.2${white} 1.1.2 Certifique-se de que /tmp esteja configurado"
v1_dir_tmp=`findmnt -n /tmp | egrep "^/tmp\s+tmpfs\s+tmpfs\s+rw,nosuid,nodev,noexec"`
if [ $? -eq 0 ]; then
	echo "1.1.2 v1_dir_tmp okay" >> $doc1
	echo -e "${green}v1_dir_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.2 Verificar v1_dir_tmp" >> $doc1
	echo -e "${red}1.1.2 Verificar v1_dir_tmp${white}"
	verificar=$((verificar + 1))
fi

v2_dir_tmp=`egrep "^tmpfs\s+/tmp\s+tmpfs\s+defaults,noexec,nosuid,nodev\s+0\s+0" /etc/fstab`
if [ $? -eq 0 ]; then
	echo "1.1.2 v2_dir_tmp okay" >> $doc1
	echo -e "${green}v2_dir_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.2 Verificar v2_dir_tmp" >> $doc1
	echo -e "${red}1.1.2 Verificar v2_dir_tmp${white}"
	verificar=$((verificar + 1))
fi

v3_dir_tmp=`systemctl show "tmp.mount" | grep -i 'UnitFileState=enabled'`
if [ $? -eq 0 ]; then
	echo "1.1.2 v3_dir_tmp okay" >> $doc1
	echo -e "${green}v3_dir_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.2 Verificar v3_dir_tmp" >> $doc1
	echo -e "${red}1.1.2 Verificar v3_dir_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.3 Certifique-se de que a opção noexec esteja definida na partição /tmp
echo "" >> $doc1
echo "1.1.3 Certifique-se de que a opção noexec esteja definida na partição /tmp" >> $doc1
echo -e "${yellow}1.1.3${white} Certifique-se de que a opção noexec esteja definida na partição /tmp"
v1_noexec_tmp=`findmnt -n /tmp | grep -Ev '\bnodev\b'`
if [ $? -eq 1 ]; then
	echo "1.1.3 v1_noexec_tmp okay" >> $doc1
	echo -e "${green}v1_noexec_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.3 Verificar v1_noexec_tmp" >> $doc1
	echo -e "${red}1.1.3 Verificar v1_noexec_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.4 Certifique-se de que a opção nodev esteja definida na partição /tmp
echo "" >> $doc1
echo "1.1.4 Certifique-se de que a opção nodev esteja definida na partição /tmp" >> $doc1
echo -e "${yellow}1.1.4${white} 1.1.4 Certifique-se de que a opção nodev esteja definida na partição /tmp"
v1_nodev_tmp=`findmnt -n /tmp -n | grep -Ev '\bnodev\b'`
if [ $? -eq 1 ]; then
	echo "1.1.4 v1_nodev_tmp okay" >> $doc1
	echo -e "${green}v1_nodev_tmp oka${white}y"
	okay=$((okay + 1))
else
	echo "1.1.4 Verificar v1_nodev_tmp" >> $doc1
	echo -e "${red}1.1.4 Verificar v1_nodev_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.5 Certifique-se de que a opção nosuid esteja definida na partição /tmp
echo "" >> $doc1
echo "1.1.5 Certifique-se de que a opção nosuid esteja definida na partição /tmp" >> $doc1
echo -e "${yellow}1.1.5${white} Certifique-se de que a opção nosuid esteja definida na partição /tmp"
v1_nosuid_tmp=`findmnt -n /tmp -n | grep -Ev '\bnosuid\b'`
if [ $? -eq 1 ]; then
	echo "1.1.5 v1_nosuid_tmp okay" >> $doc1
	echo -e "${green}v1_nosuid_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.5 Verificar v1_nosuid_tmp" >> $doc1
	echo -e "${red}1.1.5 Verificar v1_nosuid_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.6 Certifique-se de que /dev/shm esteja configurado
echo "" >> $doc1
echo "1.1.6 Certifique-se de que /dev/shm esteja configurado" >> $doc1
echo -e "${yellow}1.1.6${white} Certifique-se de que /dev/shm esteja configurado"
v1_dev_shm=`findmnt -n /dev/shm | egrep "^tmpfs\s+on\s+/dev/shm\s+type\s+tmpfs\s+\(rw,nosuid,nodev,noexec,relatime,seclabel\)"`
if [ $? -eq 0 ]; then
	echo "1.1.6 v1_dev_shm okay" >> $doc1
	echo -e "${green}v1_dev_shm okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.6 Verificar v1_dev_shm" >> $doc1
	echo -e "${red}1.1.6 Verificar v1_dev_shm${white}"
	verificar=$((verificar + 1))
fi

v2_dev_shm=`egrep "^tmpfs\s+/dev/shm\s+tmpfs\s+defaults,noexec,nodev,nosuid\s+0\s+0" /etc/fstab`
if [ $? -eq 0 ]; then
	echo "1.1.6 v2_dev_shm okay" >> $doc1
	echo -e "${green}v2_dev_shm okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.6 Verificar v2_dev_shm" >> $doc1
	echo -e "${red}1.1.6 Verificar v2_dev_shm${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.7 Certifique-se de que a opção noexec esteja definida na partição /dev/shm
echo "" >> $doc1
echo "1.1.7 Certifique-se de que a opção noexec esteja definida na partição /dev/shm" >> $doc1
echo -e "${yellow}1.1.7${white} Certifique-se de que a opção noexec esteja definida na partição /dev/shm"
v1_noexec_dev_shm=`findmnt -n /dev/shm | grep -Ev '\bnoexec\b'`
if [ $? -eq 1 ]; then
	echo "1.1.7 v1_noexec_dev_shm okay" >> $doc1
	echo -e "${green}v1_noexec_dev_shm okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.7 Verificar v1_noexec_dev_shm" >> $doc1
	echo -e "${red}1.1.7 Verificar v1_noexec_dev_shm${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.8 Certifique-se de que a opção nodev esteja definida na partição /dev/shm
echo "" >> $doc1
echo "1.1.8 Certifique-se de que a opção nodev esteja definida na partição /dev/shm" >> $doc1
echo -e "${yellow}1.1.8${white} Certifique-se de que a opção nodev esteja definida na partição /dev/shm"
v1_nodev_dev_shm=`findmnt -n /dev/shm | grep -Ev '\bnodev\b'`
if [ $? -eq 1 ]; then
	echo "1.1.8 v1_nodev_dev_shm okay" >> $doc1
	echo -e "${green}v1_nodev_dev_shm okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.8 Verificar v1_nodev_dev_shm" >> $doc1
	echo -e "${red}1.1.8 Verificar v1_nodev_dev_shm${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.9 Certifique-se de que a opção nosuid esteja definida na partição /dev/shm
echo "" >> $doc1
echo "1.1.9 Certifique-se de que a opção nosuid esteja definida na partição /dev/shm" >> $doc1
echo -e "${yellow}1.1.9${white} Certifique-se de que a opção nosuid esteja definida na partição /dev/shm"
v1_nosuid_dev_shm=`findmnt -n /dev/shm | grep -Ev '\bnosuid\b'`
if [ $? -eq 1 ]; then
	echo "1.1.9 v1_nosuid_dev_shm okay" >> $doc1
	echo -e "${green}v1_nosuid_dev_shm okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.9 Verificar v1_nosuid_dev_shm" >> $doc1
	echo -e "${red}1.1.9 Verificar v1_nosuid_dev_shm${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.10 Certifique-se de que existe uma partição separada para /var
echo "" >> $doc1
echo "1.1.10 Certifique-se de que existe uma partição separada para /var" >> $doc1
echo -e "${yellow}1.1.10${white} Certifique-se de que existe uma partição separada para /var"
v1_dir_var=`findmnt /var`
if [ $? -eq 0 ]; then
	echo "1.1.10 v1_dir_var okay" >> $doc1
	echo -e "${green}v1_dir_var okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.10 Verificar v1_dir_var" >> $doc1
	echo -e "${red}1.1.10 Verificar v1_dir_var${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.11 Certifique-se de que existe uma partição separada para /var/tmp
echo "" >> $doc1
echo "1.1.11 Certifique-se de que existe uma partição separada para /var/tmp" >> $doc1
echo -e "${yellow}1.1.11${white} Certifique-se de que existe uma partição separada para /var/tmp"
v1_dir_var_tmp=`findmnt /var/tmp`
if [ $? -eq 0 ]; then
	echo "1.1.11 v1_dir_var_tmp okay" >> $doc1
	echo -e "${green}v1_dir_var_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.11 Verificar v1_dir_var_tmp" >> $doc1
	echo -e "${red}1.1.11 Verificar v1_dir_var_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.12 Certifique-se de que a partição /var/tmp inclua a opção noexec
echo "" >> $doc1
echo "1.1.12 Certifique-se de que a partição /var/tmp inclua a opção noexec" >> $doc1
echo -e "${yellow}1.1.12${white} Certifique-se de que a partição /var/tmp inclua a opção noexec"
v1_noexec_var_tmp=`findmnt -n /var/tmp | grep -Ev '\bnoexec\b'`
if [ $? -eq 1 ]; then
	echo "1.1.12 v1_noexec_var_tmp okay" >> $doc1
	echo -e "${green}v1_noexec_var_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.12 Verificar v1_noexec_var_tmp" >> $doc1
	echo -e "${red}1.1.12 Verificar v1_noexec_var_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.13 Certifique-se de que a partição /var/tmp inclua a opção nodev
echo "" >> $doc1
echo "1.1.13 Certifique-se de que a partição /var/tmp inclua a opção nodev" >> $doc1
echo -e "${yellow}1.1.13${white} Certifique-se de que a partição /var/tmp inclua a opção nodev"
v1_nodev_var_tmp=`findmnt -n /var/tmp | grep -Ev '\bnodev\b'`
if [ $? -eq 1 ]; then
	echo "1.1.13 v1_nodev_var_tmp okay" >> $doc1
	echo -e "${green}v1_nodev_var_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.13 Verificar v1_nodev_var_tmp" >> $doc1
	echo -e "${red}1.1.13 Verificar v1_nodev_var_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.14 Certifique-se de que a partição /var/tmp inclui a opção nosuid
echo "" >> $doc1
echo "1.1.14 Certifique-se de que a partição /var/tmp inclui a opção nosuid" >> $doc1
echo -e "${yellow}1.1.14${white} Certifique-se de que a partição /var/tmp inclui a opção nosuid"
v1_nosuid_var_tmp=`findmnt -n /var/tmp | grep -Ev '\bnosuid\b'`
if [ $? -eq 1 ]; then
	echo "1.1.14 v1_nosuid_var_tmp okay" >> $doc1
	echo -e "${green}v1_nosuid_var_tmp okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.14 Verificar v1_nosuid_var_tmp" >> $doc1
	echo -e "${red}1.1.14 Verificar v1_nosuid_var_tmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.15 Certifique-se de que existe uma partição separada para /var/log
echo "" >> $doc1
echo "1.1.15 Certifique-se de que existe uma partição separada para /var/log" >> $doc1
echo -e "${yellow}1.1.15${white} Certifique-se de que existe uma partição separada para /var/log"
v1_dir_var_log=`findmnt /var/log`
if [ $? -eq 0 ]; then
	echo "1.1.15 v1_dir_var_log okay" >> $doc1
	echo -e "${green}v1_dir_var_log okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.15 Verificar v1_dir_var_log" >> $doc1
	echo -e "${red}1.1.15 Verificar v1_dir_var_log${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.16 Certifique-se de que existe partição separada para /var/log/audit
echo "" >> $doc1
echo "1.1.16 Certifique-se de que existe partição separada para /var/log/audit" >> $doc1
echo -e "${yellow}1.1.16${white} Certifique-se de que existe partição separada para /var/log/audit"
v1_dir_var_log_audit=`findmnt /var/log/audit`
if [ $? -eq 0 ]; then
	echo "1.1.16 v1_dir_var_log_audit okay" >> $doc1
	echo -e "${green}v1_dir_var_log_audit okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.16 Verificar v1_dir_var_log_audit" >> $doc1
	echo -e "${red}1.1.16 Verificar v1_dir_var_log_audit${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.17 Certifique-se de que existe uma partição separada para /home
echo "" >> $doc1
echo "1.1.17 Certifique-se de que existe uma partição separada para /home" >> $doc1
echo -e "${yellow}1.1.17${white} Certifique-se de que existe uma partição separada para /home"
v1_dir_home=`findmnt /home`
if [ $? -eq 0 ]; then
	echo "1.1.17 v1_dir_home okay" >> $doc1
	echo -e "${green}v1_dir_home okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.17 Verificar v1_dir_home" >> $doc1
	echo -e "${red}1.1.17 Verificar v1_dir_home${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.18 Certifique-se de que a partição /home inclua a opção nodev
echo "" >> $doc1
echo "1.1.18 Certifique-se de que a partição /home inclua a opção nodev" >> $doc1
echo -e "${yellow}1.1.18${white} Certifique-se de que a partição /home inclua a opção nodev"
v1_nodev_home=`findmnt /home | grep -Ev '\bnodev\b'`
if [ $? -eq 1 ]; then
	echo "1.1.18 v1_nodev_home okay" >> $doc1
	echo -e "${green}v1_nodev_home okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.18 Verificar v1_nodev_home" >> $doc1
	echo -e "${red}1.1.18 Verificar v1_nodev_home${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.19 Certifique-se de que as partições de mídia removível incluam a opção noexec
echo "" >> $doc1
echo "1.1.19 Certifique-se de que as partições de mídia removível incluam a opção noexec" >> $doc1
echo -e "${yellow}1.1.19${white} Certifique-se de que as partições de mídia removível incluam a opção noexec"
v1_noexec_part=`lsblk -o RM,MOUNTPOINT | awk -F " " '/1/ {print $2}' | grep -Ev "\bnoexec\b"`
if [ -z $v1_noexec_part ]; then
	echo "1.1.19 v1_noexec_part okay" >> $doc1
	echo -e "${green}v1_noexec_part okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.19 Verificar v1_noexec_part" >> $doc1
	echo -e "${red}1.1.19 Verificar v1_noexec_part${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.20 Certifique-se de que a opção nodev esteja definida em partições de mídia removível
echo "" >> $doc1
echo "1.1.20 Certifique-se de que a opção nodev esteja definida em partições de mídia removível" >> $doc1
echo -e "${yellow}1.1.20${white} Certifique-se de que a opção nodev esteja definida em partições de mídia removível"
v1_nodev_part=`lsblk -o RM,MOUNTPOINT | awk -F " " '/1/ {print $2}' | grep -Ev "\bnodev\b"`
if [ -z $v1_nodev_part ]; then
	echo "1.1.20 v1_nodev_part okay" >> $doc1
	echo -e "${green}v1_nodev_part okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.20 Verificar v1_nodev_part" >> $doc1
	echo -e "${red}1.1.20 Verificar v1_nodev_part${white}"
	verificar=$((verificar + 1))
fi

echo 


# 1.1.21 Certifique-se de que a opção nosuid esteja definida em partições de mídia removível
echo "" >> $doc1
echo "1.1.21 Certifique-se de que a opção nosuid esteja definida em partições de mídia removível" >> $doc1
echo -e "${yellow}1.1.21${white} Certifique-se de que a opção nosuid esteja definida em partições de mídia removível"
v1_nosuid_part=`lsblk -o RM,MOUNTPOINT | awk -F " " '/1/ {print $2}' | grep -Ev "\bnosuid\b" `
if [ -z $v1_nosuid_part ]; then
	echo "1.1.21 v1_nosuid_part okay" >> $doc1
	echo -e "${green}v1_nosuid_part okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.21 Verificar v1_nosuid_part" >> $doc1
	echo -e "${red}1.1.21 Verificar v1_nosuid_part${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.22 Certificar se o recurso stick bit está definido para todos os diretórios graváveis
echo "" >> $doc1
echo "1.1.22 Certificar se o recurso stick bit está definido para todos os diretórios graváveis" >> $doc1
echo -e "${yellow}1.1.22${white} Certificar se o recurso stick bit está definido para todos os diretórios graváveis"
v1_sticky_bit=`df --local -P > /dev/null 2>&1 | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null`
if [ $? -eq 1 ]; then
	echo "1.1.22 v1_sticky_bit okay" >> $doc1
	echo -e "${green}v1_sticky_bit okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.22 Verificar v1_sticky_bit" >> $doc1
	v1_sticky_bit2=`df --local -P 2> /dev/null | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null`
	echo "" >> $doc1
	echo "$v1_sticky_bit2" >> $doc1
	echo -e "${red}1.1.22 Verificar v1_sticky_bit${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.23 Certificar se a montagem automática está desativada (autofs)
echo "" >> $doc1
echo "1.1.23 Certificar se a montagem automática está desativada (autofs)" >> $doc1
echo -e "${yellow}1.1.23${white} Certificar se a montagem automática está desativada"
v1_autofs=`systemctl show "autofs.service" | grep -i unitfilestate=enabled`
if [ $? -eq 1 ]; then
	echo "1.1.23 v1_autofs okay" >> $doc1
	echo -e "${green}v1_autofs okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.23 Verificar v1_autofs" >> $doc1
	echo -e "${red}1.1.23 Verificar v1_autofs${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.1.24 Certificar se o armazenamento USB está restrito (usb)
echo "" >> $doc1
echo "1.1.24 Certificar se o armazenamento USB está restrito (usb)" >> $doc1
echo -e "${yellow}1.1.23${white} Certificar se o armazenamento USB está restrito"
v1_usb=`modprobe -n -v usb-storage | grep 'install /bin/true'`
if [ $? -eq 0 ]; then
	echo "1.1.24 v1_usb okay" >> $doc1
	echo -e "${green}v1_usb okay${white}"
	okay=$((okay + 1))
else
	echo "1.1.24 Verificar v1_usb" >> $doc1
	echo -e "${red}1.1.24 Verificar v1_usb${white}"
	verificar=$((verificar + 1))
fi

v2_usb=`lsmod | grep usb-storage`
if [ $? -eq 1 ]; then
	echo "1.1.24 v2_usb okay" >> $doc1
	echo -e "${green}v2_usb okay${white}"
	okay=$((okay + 1))
else
	echo "11.1.24 Verificar v2_usb" >> $doc1
	echo -e "${red}11.1.24 Verificar v2_usb${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.2.1 Certifique-se de que as chaves GPG estejam configurada
echo "" >> $doc1
echo "1.2.1 Certifique-se de que as chaves GPG estejam configurada" >> $doc1
echo -e "${yellow}1.2.1${white} Certifique-se de que as chaves GPG estejam configurada"
v1_gpg_keys=`rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'`
if [ $? -eq 0 ]; then
	echo "1.2.1 v1_usb okay" >> $doc1
	echo "$v1_gpg_keys" >> $doc1
	echo -e "${green}v1_usb okay${white}"
	okay=$((okay + 1))
else
	echo "1.2.1 Verificar v1_usb" >> $doc1
	echo -e "${red}1.2.1 Verificar v1_usb${white}"
	verificar=$((verificar + 1))
fi

echo 


# 1.2.2 Certificar se os repositórios do gerenciador de pacotes estão configurados (yum repolist)
echo "" >> $doc1
echo "1.2.2 Certificar se os repositórios do gerenciador de pacotes estão configurados (yum repolist)" >> $doc1
echo -e "${yellow}1.2.2${white} Certificar se os repositórios do gerenciador de pacotes estão configurados"
v1_yum_repolist=`yum repolist 2>/dev/null`
if [ $? -eq 1 ]; then
	echo "1.2.2 v1_yum_repolist okay" >> $doc1
	echo -e "${green}v1_yum_repolist okay${white}"
	okay=$((okay + 1))
else
	echo "1.2.2 Verificar v1_yum_repolist" >> $doc1
	echo "" >> $doc1
	echo "`yum repolist 2>/dev/null`" >> $doc1
	echo -e "${red}1.2.2 Verificar v1_yum_repolist${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.2.3 Certificar se a assinatura de pacotes RPM está ativa (gpgcheck)
echo "" >> $doc1
echo "1.2.3 Certificar se a assinatura de pacotes RPM está ativa (gpgcheck)" >> $doc1
echo -e "${yellow}1.2.3${white} Certificar se a assinatura de pacotes RPM está ativa"
v1_gpgcheck=`grep 'gpgcheck=1' /etc/yum.conf`
if [ $? -eq 0 ]; then
	echo "1.2.3 v1_gpgcheck okay" >> $doc1
	echo -e "${green}v1_gpgcheck okay${white}"
	okay=$((okay + 1))
else
	echo "1.2.3 Verificar v1_gpgcheck" >> $doc1
	echo -e "${red}1.2.3 Verificar v1_gpgcheck${white}"
	verificar=$((verificar + 1))
fi

v2_gpgcheck=`grep -P '^\h*gpgcheck=[^1\n\r]+\b(\h+.*)?$' /etc/yum.conf /etc/yum.repos.d/*.repo`
if [ $? -eq 1 ]; then
	echo "1.2.3 v2_gpgcheck okay" >> $doc1
	echo -e "${green}v2_gpgcheck okay${white}"
	okay=$((okay + 1))
else
	echo "1.2.3 Verificar v2_gpgcheck" >> $doc1
	echo -e "${red}1.2.3 Verificar v2_gpgcheck${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.3.1 Certificar se o recurso AIDE está instalado (aide)
echo "" >> $doc1
echo "1.3.1 Certificar se o recurso AIDE está instalado (aide)" >> $doc1
echo -e "${yellow}1.3.1${white} Certificar se o recurso AIDE está instalado"
v1_aide=`rpm -q aide`
if [ $? == 0 ]; then
	echo "1.3.1 v1_aide okay" >> $doc1
	echo -e "${green}v1_aide okay${white}"
	okay=$((okay + 1))
else
	echo "1.3.1 Verificar v1_aide" >> $doc1
	echo -e "${red}1.3.1 Verificar v1_aide${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.3.2 Certificar se está configurado verificação periódica da integridade do sistema (cron job)
echo "" >> $doc1
echo "1.3.2 Certificar se está configurado verificação periódica da integridade do sistema (cron job)" >> $doc1
echo -e "${yellow}1.3.2${white} Certificar se está configurado verificação periódica da integridade do sistema"
v1_cron_job=`grep -Ers '^([^#]+\s+)?(\/usr\/s?bin\/|^\s*)aide(\.wrapper)?\s(--?\S+\s)*(--(check|update)|\$AIDEARGS)\b' /etc/cron.* /etc/crontab /var/spool/cron/`
if [ $? -eq 0 ]; then
	echo "1.3.2 v1_cron_job okay" >> $doc1
	echo -e "${green}v1_cron_job okay${white}"
	okay=$((okay + 1))
else
	echo "1.3.2 Verificar v1 v2 v3 e v4_cron_job" >> $doc1
	echo -e "${red}1.3.2 Verificar v1 v2 v3 e v4_cron_job${white}"
	verificar=$((verificar + 1))
fi

v2_cron_job=`systemctl is-enabled aidecheck.service > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.3.2 v2_cron_job okay" >> $doc1
	echo -e "${green}v2_cron_job okay${white}"
	okay=$((okay + 1))
else
	echo "1.3.2 Verificar v1 v2 v3 e v4_cron_job" >> $doc1
	echo -e "${red}1.3.2 Verificar v1 v2 v3 e v4_cron_job${white}"
	verificar=$((verificar + 1))
fi

v3_cron_job=`systemctl is-enabled aidecheck.timer > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.3.2 v3_cron_job okay" >> $doc1
	echo -e "${green}v3_cron_job okay${white}"
	okay=$((okay + 1))
else
	echo "1.3.2 Verificar v1 v2 v3 e v4_cron_job" >> $doc1
	echo -e "${red}1.3.2 Verificar v1 v2 v3 e v4_cron_job${white}"
	verificar=$((verificar + 1))
fi

v4_cron_job=`systemctl status aidecheck.timer > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.3.2 v4_cron_job okay" >> $doc1
	echo -e "${green}v4_cron_job okay${white}"
	okay=$((okay + 1))
else
	echo "1.3.2 Verificar v1 v2 v3 e v4_cron_job" >> $doc1
	echo -e "${red}1.3.2 Verificar v1 v2 v3 e v4_cron_job${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.4.2 Certifique-se de que as permissões na configuração do bootloader estejam configuradas
echo "" >> $doc1
echo "1.4.2 Certifique-se de que as permissões na configuração do bootloader estejam configuradas" >> $doc1
echo -e "${yellow}1.4.2${white} Certifique-se de que as permissões na configuração do bootloader estejam configuradas"
v1_ensure_perm_bootloader_is_config=`ls /boot/grub2/grub.cfg 2>/dev/null`
if [ $? -eq 0 ]; then
	v1_ensure_perm_bootloader_is_config1=`grep 'root:root' /boot/grub2/grub.cfg`
	if [ $? -eq 0 ]; then
		echo "1.4.2 v1_ensure_perm_bootloader_is_config1 okay" >> $doc1
		echo -e "${green}v1_ensure_perm_bootloader_is_config1 okay${white}"
		okay=$((okay + 1))
	else
		echo "1.4.2 Verificar v1_ensure_perm_bootloader_is_config1" >> $doc1
		echo -e "${red}1.4.2 Verificar v1_ensure_perm_bootloader_is_config1${white}"
		verificar=$((verificar + 1))
	fi

	v1_ensure_perm_bootloader_is_config2=`grep 'og-rwx' /boot/grub2/grub.cfg`
	if [ $? -eq 0 ]; then
		echo "1.4.2 v1_ensure_perm_bootloader_is_config2 okay" >> $doc1
		echo -e "${green}v1_ensure_perm_bootloader_is_config2 okay${white}"
		okay=$((okay + 1))
	else
		echo "1.4.2 Verificar v1_ensure_perm_bootloader_is_config2" >> $doc1
		echo -e "${red}1.4.2 Verificar v1_ensure_perm_bootloader_is_config2${white}"
		verificar=$((verificar + 1))
	fi

else
	echo "" >> $doc1
	echo "1.4.2 Verificar v1_ensure_perm_bootloader_is_config1 e config2" >> $doc1
	echo -e "${red}1.4.2 Verificar v1_ensure_perm_bootloader_is_config1 e config 2${white}"
	verificar=$((verificar + 2))

fi

v2_ensure_perm_bootloader_is_config=`ls /boot/grub2/user.cfg 2>/dev/null`
if [ $? -eq 0 ]; then
	v2_ensure_perm_bootloader_is_config1=`grep 'root:root' /boot/grub2/user.cfg`
	if [ $? -eq 0 ]; then
		echo "1.4.2 v2_ensure_perm_bootloader_is_config1 okay" >> $doc1
		echo -e "${green}v2_ensure_perm_bootloader_is_config1 okay${white}"
		okay=$((okay + 1))
	else
		echo "1.4.2 Verificar v2_ensure_perm_bootloader_is_config1" >> $doc1
		echo -e "${red}1.4.2 Verificar v2_ensure_perm_bootloader_is_config1${white}"
		verificar=$((verificar + 1))
	fi

	v2_ensure_perm_bootloader_is_config2=`grep 'og-rwx' /boot/grub2/user.cfg`
	if [ $? -eq 0 ]; then
		echo "1.4.2 v2_ensure_perm_bootloader_is_config2 okay" >> $doc1
		echo -e "${green}v2_ensure_perm_bootloader_is_config2 okay${white}"
		okay=$((okay + 1))
	else
		echo "1.4.2 Verificar v2_ensure_perm_bootloader_is_config2" >> $doc1
		echo -e "${red}1.4.2 Verificar v2_ensure_perm_bootloader_is_config2${white}"
		verificar=$((verificar + 1))
	fi

else
	echo "1.4.2 Verificar v2_ensure_perm_bootloader_is_config1 e config2" >> $doc1
	echo -e "${red}1.4.2 Verificar v2_ensure_perm_bootloader_is_config1 e config 2${white}"
	verificar=$((verificar + 2))

fi

echo


# 1.4.3 Certificar se a autenticação necessária para o modo de usuário único está configurada - systemctl_fail (modo de resgate)
echo "" >> $doc1
echo "1.4.3 Certificar se a autenticação necessária para o modo de usuário único está configurada - systemctl_fail (modo de resgate)" >> $doc1
echo -e "${yellow}1.4.3${white} Certificar se a autenticação necessária para o modo de usuário único está configurada"
v1_systemctl_fail=`egrep -E "^ExecStart=-/bin/sh\s+-c\s+\"+.*/sbin/sulogin;\s+/usr/bin/systemctl\s+--fail\s+--no-block\s+default\"" /usr/lib/systemd/system/rescue.service /usr/lib/systemd/system/rescue.service`
if [ $? -eq 0 ]; then
	echo "1.4.3 v1_systemctl_fail okay" >> $doc1
	echo -e "${green}v1_systemctl_fail okay${white}"
	okay=$((okay + 1))
else
	echo "1.4.3 Verificar v1_systemctl_fail" >> $doc1
	echo -e "${red}1.4.3 Verificar v1_systemctl_fail${white}"
	verificar=$((verificar + 1))
fi

v2_systemctl_fail=`egrep -E "^ExecStart=-/bin/sh\s+-c\s+\"+.*/sbin/sulogin;\s+/usr/bin/systemctl\s+--fail\s+--no-block\s+default\"" /usr/lib/systemd/system/emergency.service`
if [ $? -eq 0 ]; then
	echo "1.4.3 v2_systemctl_fail okay" >> $doc1
	echo -e "${green}v2_systemctl_fail okay${white}"
	okay=$((okay + 1))
else
	echo "1.4.3 Verificar v2_systemctl_fail" >> $doc1
	echo -e "${red}1.4.3 Verificar v2_systemctl_fail${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.5.1 Certificar se o core dump está em execução (dumps limits)
echo "" >> $doc1
echo "1.5.1 Certificar se o core dump está em execução (dumps limits)" >> $doc1
echo -e "${yellow}1.5.1${white} Certificar se o core dump está em execução"
v1_dumps_limits=`egrep -E "^\s*\*\s+hard\s+core\s+0" /etc/security/limits.conf /etc/security/limits.d/*`
if [ $? -eq 0 ]; then
	echo "1.5.1 v1_dumps_limits okay" >> $doc1
	echo -e "${green}v1_dumps_limits okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.1 Verificar v1 v2 v3 v4_dumps_limits" >> $doc1
	echo -e "${red}1.5.1 Verificar v1 v2 v3 v4_dumps_limits${white}"
	verificar=$((verificar + 1))
fi

v2_dumps_limits=`sysctl fs.suid_dumpable | grep 'fs.suid_dumpable = 0'`
if [ $? -eq 0 ]; then
	echo "1.5.1 v2_dumps_limits okay" >> $doc1
	echo -e "${green}v2_dumps_limits okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.1 Verificar v1 v2 v3 v4_dumps_limits" >> $doc1
	echo -e "${red}1.5.1 Verificar v1 v2 v3 v4_dumps_limits${white}"
	verificar=$((verificar + 1))
fi

v3_dumps_limits=`egrep "fs.suid_dumpable = 0" /etc/sysctl.conf /etc/sysctl.d/*`
if [ $? -eq 0 ]; then
	echo "1.5.1 v3_dumps_limits okay" >> $doc1
	echo -e "${green}v3_dumps_limits okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.1 Verificar v1 v2 v3 v4_dumps_limits" >> $doc1
	echo -e "${red}1.5.1 Verificar v1 v2 v3 v4_dumps_limits${white}"
	verificar=$((verificar + 1))
fi

v4_dumps_limits=`systemctl is-enabled coredump.service > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.5.1 v4_dumps_limits okay" >> $doc1
	echo -e "${green}v4_dumps_limits okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.1 Verificar v1 v2 v3 v4_dumps_limits" >> $doc1
	echo -e "${red}1.5.1 Verificar v1 v2 v3 v4_dumps_limits${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.5.2 Certifique-se de que o suporte XD/NX esteja ativado (suporte XD/NX)
echo "" >> $doc1
echo "1.5.2 Certifique-se de que o suporte XD/NX esteja ativado (suporte XD/NX)" >> $doc1
echo -e "${yellow}1.5.2${white} Certifique-se de que o suporte XD/NX esteja ativado"
v0_xd_nx=`rpm -q journalctl`
if [ $? -eq 0 ]; then
	v1_xd_nx=`journalctl | grep 'protection: active'`
	if [ "$?" == 0 ]; then
		echo "1.5.2 v1_xd_nx okay" >> $doc1
		echo -e "${green}v1_xd_nx okay${white}"
		okay=$((okay + 1))
	else
		echo "1.5.2 Verificar v1_xd_nx" >> $doc1
		echo -e "${red}1.5.2 Verificar v1_xd_nx${white}"
		verificar=$((verificar + 1))
	fi

else
	echo "1.5.2 Verificar v1_xd_nx" >> $doc1
	echo -e "${red}1.5.2 Verificar v1_xd_nx${white}"
	verificar=$((verificar + 1))
fi

v1_xd_nx=`[[ -n $(grep noexec[0-9]*=off /proc/cmdline) || -z $(grep -E -i ' (pae|nx) ' /proc/cpuinfo) || -n $(grep '\sNX\s.*\sprotection:\s' /var/log/dmesg | grep -v active) ]]`
if [ $? -eq 1 ]; then
	echo "1.5.2 v1_xd_nx okay" >> $doc1
	echo -e "${green}v1_xd_nx okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.2 Verificar v1_xd_nx" >> $doc1
	echo -e "${red}1.5.2 Verificar v1_xd_nx${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.5.3 Certifique-se de que a randomização de layout de espaço de endereço (ASLR) esteja habilitada
echo "" >> $doc1
echo "1.5.3 Certifique-se de que a randomização de layout de espaço de endereço (ASLR) esteja habilitada" >> $doc1
echo -e "${yellow}1.5.3${white} Certifique-se de que a randomização de layout de espaço de endereço (ASLR) esteja habilitada"
v1_ASLR=`sysctl kernel.randomize_va_space | grep 'kernel.randomize_va_space = 2'`
if [ $? -eq 0 ]; then
	echo "1.5.3 ASLR okay" >> $doc1
	echo -e "${green}ASLR okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.3 Verificar ASLR" >> $doc1
	echo -e "${red}1.5.3 Verificar ASLR${white}"
	verificar=$((verificar + 1))
fi

v2_ASLR=`grep 'kernel.randomize_va_space = 2' /etc/sysctl.conf /etc/sysctl.d/*`
if [ $? -eq 0 ]; then
	echo "1.5.3 v2_ASLR okay" >> $doc1
	echo -e "${green}v2_ASLR okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.3 Verificar v2_ASLR" >> $doc1
	echo -e "${red}1.5.3 Verificar v2_ASLR${white}"
	verificar=$((verificar + 1))
fi


# 1.5.4 Certifique-se de que o pré-link não esteja instalado (prelink)
echo "" >> $doc1
echo "1.5.4 Certifique-se de que o pré-link não esteja instalado (prelink)" >> $doc1
echo -e "${yellow}1.5.4${white} Certifique-se de que o pré-link não esteja instalado"
v1_prelink=`rpm -q prelink`
if [ $? -eq 1 ]; then
	echo "1.5.4 v1_prelink okay" >> $doc1
	echo -e "${green}v1_prelink okay${white}"
	okay=$((okay + 1))
else
	echo "1.5.4 Verificar v1_prelink" >> $doc1
	echo -e "${red}1.5.4 Verificar v1_prelink${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.6.1.1 Certifique-se de que o SELinux esteja instalado (SELinux)
echo "" >> $doc1
echo "1.6.1.1 Certifique-se de que o SELinux esteja instalado (SELinux)" >> $doc1
echo -e "${yellow}1.6.1.1${white} Certifique-se de que o SELinux esteja instalado"
v1_SELinux=`rpm -q libselinux`
if [ $? -eq 0 ]; then
	echo "1.6.1.1 v1_SELinux okay" >> $doc1
	echo -e "${green}v1_SELinux okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.1 Verificar v1_SELinux" >> $doc1
	echo -e "${red}1.6.1.1 Verificar v1_SELinux${white}"
	verificar=$((verificar + 1))
fi
echo


# 1.6.1.2 Certifique-se de que o SELinux não esteja desabilitado na configuração do bootloader
echo "" >> $doc1
echo "1.6.1.2 Certifique-se de que o SELinux não esteja desabilitado na configuração do bootloader" >> $doc1
echo -e "${yellow}1.6.1.2${white} Certifique-se de que o SELinux não esteja desabilitado na configuração do bootloader"
v1_SELinux_efidir=$(find /boot/efi/EFI/* -type d -not -name 'BOOT')
v1_SELinux_gbdir=$(find /boot -maxdepth 1 -type d -name 'grub*')
if [ -f "$v1_SELinux_efidir"/grub.cfg ]; then
	grep "^\s*linux" "$v1_SELinux_efidir"/grub.cfg | grep -Eq "(selinux=0|enforcing=0)" && echo "FAILED: \"$()\" exists" || echo -e "${green}SELinux okay${white}"
elif [ -f "$v1_SELinux_gbdir"/grub.cfg ]; then
	grep "^\s*linux" "$v1_SELinux_gbdir"/grub.cfg | grep -Eq "(selinux=0|enforcing=0)" && echo "FAILED: \"$()\" exists" || echo -e "${green}SELinux okay${white}"
else
	echo "1.6.1.2 Verificar v1 e v2_SELinux" >> $doc1
	echo -e "${red}1.6.1.2 Verificar v1 e v2_SELinux${white}"
	verificar=$((verificar + 1))
fi

echo 


# 1.6.1.3 Certifique-se de que a política SELinux esteja configurada (SELinux_Targeted)
echo "" >> $doc1
echo "1.6.1.3 Certifique-se de que a política SELinux esteja configurada (SELinux_Targeted)" >> $doc1
echo -e "${yellow}1.6.1.3${white} Certifique-se de que a política SELinux esteja configurada"
v1_SELinux_Targeted=`grep 'SELINUXTYPE=targeted' /etc/selinux/config`
if [ $? -eq 0 ]; then
	echo "1.6.1.3 v1_SELinux_Targeted okay" >> $doc1
	echo -e "${green}v1_SELinux_Targeted okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.3 Verificar v1 e v2_SELinux_Targeted" >> $doc1
	echo -e "${red}1.6.1.3 Verificar v1 e v2_SELinux_Targeted${white}"
	verificar=$((verificar + 1))
fi

v2_SELinux_Targeted=`sestatus | grep 'Loaded policy'`
if [ $? -eq 0 ]; then
	echo "1.6.1.3 v2_SELinux_Targeted okay" >> $doc1
	echo -e "${green}v2_SELinux_Targeted okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.3 Verificar v1 e v2_SELinux_Targeted" >> $doc1
	echo -e "${red}1.6.1.3 Verificar v1 e v2_SELinux_Targeted${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.6.1.4 Certifique-se de que o modo SELinux seja obrigatório (enforcing) ou permissivo (SELinux Status Enforcing/Permissive_
echo "" >> $doc1
echo "1.6.1.4 Certifique-se de que o modo SELinux seja obrigatório (enforcing) ou permissivo (SELinux Status Enforcing/Permissive_" >> $doc1
echo -e "${yellow}1.6.1.4${white} Certifique-se de que o modo SELinux seja obrigatório (enforcing) ou permissivo"
v1_SELinux_Status=`getenforce | egrep '(Enforcing|Permissive)'`
if [ $? -eq 0 ]; then
	echo "1.6.1.4 v1_SELinux_Status okay" >> $doc1
	echo -e "${green}v1_SELinux_Status okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.4 Verificar v1 e v2_SELinux_Status" >> $doc1
	echo -e "${red}1.6.1.4 Verificar v1 e v2_SELinux_Status${white}"
	verificar=$((verificar + 1))
fi

v2_SELinux_Status=`grep -Ei '^\s*SELINUX=(enforcing|permissive)' /etc/selinux/config`
if [ $? -eq 0 ]; then
	echo "1.6.1.4 v2_SELinux_Status okay" >> $doc1
	echo -e "${green}2_SELinux_Status okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.4 Verificar v1 e v2_SELinux_Status" >> $doc1
	echo -e "${red}1.6.1.4 Verificar v1 e v2_SELinux_Status${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.6.1.5 Certifique-se de que o modo SELinux seja obrigatório (enforcing) ou permissivo (SELinux set Enforcing)
echo "" >> $doc1
echo "1.6.1.5 Certifique-se de que o modo SELinux seja obrigatório (enforcing) ou permissivo (SELinux set Enforcing)" >> $doc1
echo -e "${yellow}1.6.1.5${white} Certifique-se de que o modo SELinux seja obrigatório (enforcing) ou permissivo"
v1_SELinux_set_Enforcing=`getenforce | grep 'Enforcing'`
if [ $? -eq 0 ]; then
	echo "1.6.1.5 v1_SELinux_set_Enforcing okay" >> $doc1
	echo -e "${green}v1_SELinux_set_Enforcing okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.5 Verificar v1_SELinux_set_Enforcing" >> $doc1
	echo -e "${red}1.6.1.5 Verificar v1_SELinux_set_Enforcing${white}"
	verificar=$((verificar + 1))
fi

v2_SELinux_set_Enforcing=`grep -i 'SELINUX=enforcing' /etc/selinux/config`
if [ $? -eq 0 ]; then
	echo "1.6.1.5 v2_SELinux_set_Enforcing okay" >> $doc1
	echo -e "${green}v2_SELinux_set_Enforcing okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.5 Verificar v2_SELinux_set_Enforcing" >> $doc1
	echo -e "${red}1.6.1.5 Verificar v2_SELinux_set_Enforcing${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.6.1.6 Garantir que não existam serviços não confinados (unconfined_service)
echo "" >> $doc1
echo "1.6.1.6 Garantir que não existam serviços não confinados (unconfined_service)" >> $doc1
echo -e "${yellow}1.6.1.6${white} Garantir que não existam serviços não confinados"
v1_unconfined_service=`ps -eZ | grep unconfined_service_t`
if [ $? -eq 1 ]; then
	echo "1.6.1.6 v1_unconfined_service okay" >> $doc1
	echo -e "${green}v1_unconfined_service okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.6 Verificar v1_unconfined_service" >> $doc1
	echo "$v1_unconfined_service" >> $doc1
	echo -e "${red}1.6.1.6 Verificar v1_unconfined_service${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.6.1.7 Certifique-se de que o SETroubleshoot não esteja instalado (setroubleshoot)
echo "" >> $doc1
echo "1.6.1.7 Certifique-se de que o SETroubleshoot não esteja instalado (setroubleshoot)" >> $doc1
echo -e "${yellow}1.6.1.7${white} Certifique-se de que o SETroubleshoot não esteja instalado"
v1_setroubleshoot=`rpm -q setroubleshoot`
if [ $? -eq 1 ]; then
	echo "1.6.1.7 v1_setroubleshoot okay" >> $doc1
	echo -e "${green}v1_setroubleshoot okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.7 Verificar v1_setroubleshoot" >> $doc1
	echo -e "${red}1.6.1.7 Verificar v1_setroubleshoot${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.6.1.8 Certifique-se de que o MCS Translation Service (mcstrans) não esteja instalado (mcstrans)
echo "" >> $doc1
echo "1.6.1.8 Certifique-se de que o MCS Translation Service (mcstrans) não esteja instalado (mcstrans)" >> $doc1
echo -e "${yellow}1.6.1.8${white} Certifique-se de que o MCS Translation Service (mcstrans) não esteja instalado"
v1_mcstrans=`rpm -q mcstrans`
if [ $? -eq 1 ]; then
	echo "1.6.1.8 v1_mcstrans okay" >> $doc1
	echo -e "${green}v1_mcstrans okay${white}"
	okay=$((okay + 1))
else
	echo "1.6.1.8 Verificar v1_mcstrans" >> $doc1
	echo -e "${red}1.6.1.8 Verificar v1_mcstrans${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.7.1 Certifique-se de que a mensagem do dia (motd) esteja configurada corretamente (set motd)
echo "" >> $doc1
echo "1.7.1 Certifique-se de que a mensagem do dia (motd) esteja configurada corretamente (set motd)" >> $doc1
echo -e "${yellow}1.7.1${white} Certifique-se de que a mensagem do dia (motd) esteja configurada corretamente"
v1_set_motd=`cat /etc/motd | wc -l`
if [ $? -gt 5 ]; then
	echo "1.7.1 v1_set_motd okay" >> $doc1
	echo $v1_set_motd >> $doc1
	echo -e "${green}v1_set_motd okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.1 Verificar v1_set_motd" >> $doc1
	echo -e "${red}1.7.1 Verificar v1_set_motd${white}"
	verificar=$((verificar + 1))
fi

v2_set_motd=`grep -E -i "(\\\v|\\\r|\\\m|\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/"//g'))" /etc/motd`
if [ $? -eq 1 ]; then
	echo "1.7.1 v2_set_motd okay" >> $doc1
	echo -e "${green}v2_set_motd okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.1 Verificar v2_set_motd" >> $doc1
	echo -e "${red}1.7.1 Verificar v2_set_motd${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.7.2 Certifique-se de que o banner de aviso de login local (issue) esteja configurado corretamente (set banner login)
echo "" >> $doc1
echo "1.7.2 Certifique-se de que o banner de aviso de login local (issue) esteja configurado corretamente (set banner login)" >> $doc1
echo -e "${yellow}1.7.2${white} Certifique-se de que o banner de aviso de login local (issue) esteja configurado corretamente"
v1_set_banner_issue=`cat /etc/issue | wc -l`
if [ $? -gt 5 ]; then
	echo "1.7.2 v1_set_banner_issue (banner de login) okay" >> $doc1
    echo "" >> $doc1
	echo "`cat /etc/issue`" >> $doc1
	echo -e "${green}v1_set_banner_issue (banner de login) okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.2 Verificar v1_set_banner_issue (banner de login)" >> $doc1
	echo -e "${red}1.7.2 Verificar v1_set_banner_issue (banner de login)${white}"
	verificar=$((verificar + 1))
fi

v2_set_banner_issue=`grep -E -i "(\\\v|\\\r|\\\m|\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/"//g'))" /etc/issue`
if [ $? -eq 1 ]; then
	echo "1.7.2 v2_set_banner_issue okay" >> $doc1
	echo -e "${green}v2_set_banner_issue okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.2 Verificar v2_set_banner_issue" >> $doc1
	echo -e "${red}1.7.2 Verificar v2_set_banner_issue${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.7.3 Certifique-se de que o banner de aviso de login remoto esteja configurado corretamente (issue.net)
echo "" >> $doc1
echo "1.7.3 Certifique-se de que o banner de aviso de login remoto esteja configurado corretamente (issue.net)" >> $doc1
echo -e "${yellow}1.7.3${white} Certifique-se de que o banner de aviso de login remoto (issue.net) esteja configurado corretamente"
v1_set_banner_issue_net=`cat /etc/issue.net | wc -l`
if [ $? -gt 5 ]; then
	echo "1.7.3 v1_set_banner_issue_net (banner de login remoto) okay" >> $doc1
	echo "" >> $doc1
	echo "`cat /etc/issue.net`" >> $doc1
	echo -e "${green}v1_set_banner_issue_net (banner de login remoto) okay${white}"
	okay=$((okay + 1))
else	
	echo "1.7.3 Verificar v1_set_banner_issue_net (banner de login remoto)" >> $doc1
	echo -e "${red}1.7.3 Verificar v1_set_banner_issue_net (banner de login remoto)${white}"
	verificar=$((verificar + 1))
fi

v2_set_banner_issue_net=`grep -E -i "(\\\v|\\\r|\\\m|\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/"//g'))" /etc/issue.net`
if [ $? -eq 1 ]; then
	echo "1.7.3 v2_set_banner_issue_net okay" >> $doc1
	echo -e "${green}v2_set_banner_issue_net okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.3 Verificar v2_set_banner_issue_net" >> $doc1
	echo -e "${red}1.7.3 Verificar v2_set_banner_issue_net${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.7.4 Certifique-se de que as permissões em /etc/motd estejam configuradas
echo "" >> $doc1
echo "1.7.4 Certifique-se de que as permissões em /etc/motd estejam configuradas" >> $doc1
echo -e "${yellow}1.7.4${white} Certifique-se de que as permissões em /etc/motd estejam configuradas corretamente"
v1_permissao_root_etc_motd=`stat /etc/motd | grep 'Access: (0644/-rw-r--r--)'`
if [ $? -eq 0 ]; then
	echo "1.7.4 v1_permissao_root_etc_motd okay" >> $doc1
	echo $v1_permissao_root_etc_motd >> $doc1
	echo -e "${green}v1_permissao_root_etc_motd okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.4 Verificar v1_permissao_root_etc_motd" >> $doc1
	echo "`stat /etc/motd | grep 'Access: ('`" >> $doc1
	echo -e "${red}1.7.4 Verificar v1_permissao_root_etc_motd${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.7.5 Certifique-se de que as permissões em /etc/issue estejam configuradas
echo "" >> $doc1
echo "Certifique-se de que as permissões em /etc/issue estejam configuradas" >> $doc1
echo -e "${yellow}1.7.5${white} Certifique-se de que as permissões em /etc/issue estejam configuradas corretamente"
v1_permissao_root_etc_issue=`stat /etc/issue | grep 'Access: (0644/-rw-r--r--)'`
if [ $? -eq 0 ]; then
	echo "1.7.5 v1_permissao_root_etc_issue okay" >> $doc1
	echo $v1_permissao_root_etc_issue >> $doc1
	echo -e "${green}v1_permissao_root_etc_issue okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.5 Verificar v1_permissao_root_etc_issue" >> $doc1
	echo "`stat /etc/issue | grep 'Access: ('`" >> $doc1
	echo -e "${red}1.7.5 Verificar v1_permissao_root_etc_issue${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.7.6 Certifique-se de que as permissões em /etc/issue.net estejam configuradas corretamente 
echo "" >> $doc1
echo "1.7.6 Certifique-se de que as permissões em /etc/issue.net estejam configuradas corretamente" >> $doc1
echo -e "${yellow}1.7.6${white} Certifique-se de que as permissões em /etc/issue.net estejam configuradas corretamente"
v1_permissao_root_etc_issue_net=`stat /etc/issue.net | grep 'Access: (0644/-rw-r--r--)'`
if [ $? -eq 0 ]; then
	echo "1.7.5 v1_permissao_root_etc_issue_net okay" >> $doc1
	echo $v1_permissao_root_etc_issue_net >> $doc1
	echo -e "${green}v1_permissao_root_etc_issue_net okay${white}"
	okay=$((okay + 1))
else
	echo "1.7.5 Verificar v1_permissao_root_etc_issue_net" >> $doc1
	echo "`stat /etc/issue.net | grep 'Access: ('`" >> $doc1
	echo -e "${red}1.7.5 Verificar v1_permissao_root_etc_issue_net${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.8.1 Certifique-se de que o GNOME Display Manager foi removido (gnome)
echo "" >> $doc1
echo "1.8.1 Certifique-se de que o GNOME Display Manager foi removido (gnome)" >> $doc1
echo -e "${yellow}1.8.1${white} Certifique-se de que o GNOME Display Manager foi removido"
v1_gnome=`rpm -q gdm`
if [ $? -eq 1 ]; then
	echo "1.8.1 v1_gnome okay" >> $doc1
	echo -e "${green}v1_gnome okay${white}"
	okay=$((okay + 1))
else
	echo "1.8.1 Verificar v1_gnome" >> $doc1
	echo -e "${red}1.8.1 Verificar v1_gnome${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.8.2 Certifique-se de que o banner de login do GDM esteja configurado
echo "" >> $doc1
echo "1.8.2 Certifique-se de que o banner de login do GDM esteja configurado" >> $doc1
echo -e "${yellow}1.8.2${white} Certifique-se de que o banner de login do GDM esteja configurado"
v1_gdm_login_banner=`grep 'user-db:user' /etc/dconf/profile/gdm > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.8.2 v1_gdm_login_banner okay" >> $doc1
	echo -e "${green}v1_gdm_login_banner okay${white}"
	okay=$((okay + 1))
else
	echo "1.8.2 Verificar v1_gdm_login_banner" >> $doc1
	echo -e "${red}1.8.2 Verificar v1_gdm_login_banner${white}"
	verificar=$((verificar + 1))
fi

v1_gdm_login_banner2=`grep 'system-db:gdm' /etc/dconf/profile/gdm > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.8.2 v1_gdm_login_banner2 okay" >> $doc1
	echo -e "${green}v1_gdm_login_banner2 okay${white}"
	okay=$((okay + 1))
else
	echo "1.8.2 Verificar v1_gdm_login_banner2" >> $doc1
	echo -e "${red}1.8.2 Verificar v1_gdm_login_banner2${white}"
	verificar=$((verificar + 1))
fi

v1_gdm_login_banner3=`grep 'file-db:/usr/share/gdm/greeter-dconf-defaults' /etc/dconf/profile/gdm > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.8.2 v1_gdm_login_banner3 okay" >> $doc1
	echo -e "${green}v1_gdm_login_banner3 okay${white}"
	okay=$((okay + 1))
else
	echo "1.8.2 Verificar v1_gdm_login_banner3" >> $doc1
	echo -e "${red}1.8.2 Verificar v1_gdm_login_banner3${white}"
	verificar=$((verificar + 1))
fi

v2_gdm_login_banner=`grep 'banner-message-enable=true' /etc/dconf/db/gdm.d/* > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.8.2 v2_gdm_login_banner okay" >> $doc1
	echo -e "${green}v2_gdm_login_banner okay${white}"
	okay=$((okay + 1))
else
	echo "1.8.2 Verificar v2_gdm_login_banner" >> $doc1
	echo -e "${red}1.8.2 Verificar v2_gdm_login_banner${white}"
	verificar=$((verificar + 1))
fi

v2_gdm_login_banner=`grep 'banner-message-text=' /etc/dconf/db/gdm.d/* > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "1.8.2 v2_gdm_login_banner okay" >> $doc1
	echo -e "${green}v2_gdm_login_banner okay${white}"
	okay=$((okay + 1))
else
	echo "1.8.2 Verificar v2_gdm_login_banner" >> $doc1
	echo -e "${red}1.8.2 Verificar v2_gdm_login_banner${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.8.3 Certifique-se de que a exibição do último usuário conectado está desabilitado
echo "" >> $doc1
echo "1.8.3 Certifique-se de que a exibição do último usuário conectado está desabilitado" >> $doc1
echo -e "${yellow}1.8.3${white} Certifique-se de que a exibição do último usuário conectado está desabilitad"
v0_last_logged_display_disabled=`ls /etc/dconf/profile/gdm > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	v1_last_logged_display_disabled=`grep 'user-db:user' /etc/dconf/profile/gdm > /dev/null 2>&1`
	if [ $? -eq 0 ]; then
		echo "1.8.3 v1_last_logged_display_disabled okay" >> $doc1
		echo -e "${green}v1_last_logged_display_disabled okay${white}"
		okay=$((okay + 1))
	else
		echo "1.8.3 Verificar v1_last_logged_display_disabled" >> $doc1
		echo -e "${red}1.8.3 Verificar v1_last_logged_display_disabled${white}"
		verificar=$((verificar + 1))
	fi

	v1_last_logged_display_disabled2=`grep 'system-db:gdm' /etc/dconf/profile/gdm > /dev/null 2>&1`
	if [ $? -eq 0 ]; then
		echo "1.8.3 v1_last_logged_display_disabled2 okay" >> $doc1
		echo -e "${green}v1_last_logged_display_disabled2 okay${white}"
		okay=$((okay + 1))
	else
		echo "1.8.3 Verificar v1_last_logged_display_disabled2" >> $doc1
		echo -e "${red}1.8.3 Verificar v1_last_logged_display_disabled2${white}"
		verificar=$((verificar + 1))
	fi

	v1_last_logged_display_disabled3=`grep 'file-db:/usr/share/gdm/greeter-dconf-defaults' /etc/dconf/profile/gdm > /dev/null 2>&1`
	if [ $? -eq 0 ]; then
		echo "1.8.3 v1_last_logged_display_disabled3 okay" >> $doc1
		echo -e "${green}v1_last_logged_display_disabled3 okay${white}"
		okay=$((okay + 1))
	else
		echo "1.8.3 Verificar v1_last_logged_display_disabled3" >> $doc1
		echo -e "${red}1.8.3 Verificar v1_last_logged_display_disabled3${white}"
		verificar=$((verificar + 1))
	fi

else
	echo "1.8.3 Verificar v1_last_logged_display_disabled 1, 2 e 3" >> $doc1
	echo -e "${red}1.8.3 Verificar v1_last_logged_display_disabled 1, 2 e 3${white}"
	verificar=$((verificar + 3))
fi


v2_last_logged_display_disabled0=`ls /etc/dconf/db/gdm.d/ > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	v2_last_logged_display_disabled=`grep 'disable-user-list=true' /etc/dconf/db/gdm.d/* > /dev/null 2>&1`
	if [ $? -eq 0 ]; then
		echo "1.8.3 v2_last_logged_display_disabled okay" >> $doc1
		echo -e "${green}v2_last_logged_display_disabled okay${white}"
		okay=$((okay + 1))
	else
		echo "1.8.3 Verificar v2_last_logged_display_disabled" >> $doc1
		echo -e "${red}1.8.3 Verificar v2_last_logged_display_disabled${white}"
		verificar=$((verificar + 1))
	fi

else
		echo "1.8.3 Verificar v2_last_logged_display_disabled" >> $doc1
		echo -e "${red}1.8.3 Verificar v2_last_logged_display_disabled${white}"
		verificar=$((verificar + 1))
fi

echo


# 1.8.4 Certifique-se de que o XDCMP não esteja habilitado 
echo "" >> $doc1
echo "1.8.4 Certifique-se de que o XDCMP não esteja habilitado" >> $doc1
echo -e "${yellow}1.8.4${white} Certifique-se de que o XDCMP não esteja habilitado"
v1_xdmcp=`grep -Eis '^\s*Enable\s*=\s*true' /etc/gdm/custom.conf`
if [ $? -eq 1 ]; then
	echo "1.8.4 v1_xdmcp okay" >> $doc1
	echo -e "${green}v1_xdmcp okay${white}"
	okay=$((okay + 1))
else
	echo "1.8.4 Verificar v1_xdmcp" >> $doc1
	echo -e "${red}1.8.4 Verificar v1_xdmcp${white}"
	verificar=$((verificar + 1))
fi

echo


# 1.9 Certifique-se de que as atualizações, patches e software de segurança adicional estejam instalados
echo "" >> $doc1
echo "1.9 Certifique-se de que as atualizações, patches e software de segurança adicional estejam instalados" >> $doc1
echo -e "${yellow}1.9${white} Certifique-se de que as atualizações, patches e software de segurança adicional estejam instalados"
v1_updt_patches_installed=`yum check-update > /dev/null 2>&1`
if [ $? -eq 100 ]; then
	echo "1.9 Verificar v1_updt_patches_installed" >> $doc1
	echo "" >> $doc1
	echo "`yum check-update`" >> $doc1
	echo -e "${red}1.9 Verificar v1_updt_patches_installed${white}"
	verificar=$((verificar + 1))
else	
	echo "1.9 v1_updt_patches_installed okay" >> $doc1
	echo -e "${green}v1_updt_patches_installed okay${white}"
	okay=$((okay + 1))
fi

echo

echo "" >> $doc1
echo "1. Verificação das configurações iniciais do sistema concluída." >> $doc1
echo -e "${purple}1. Verificação das configurações iniciais do sistema concluída.${white}"
sleep 3
echo 
echo "" >> $doc1
echo "2. Iniciando verificação de Serviços." >> $doc1
echo -e "${yellow}2. Iniciando verificação de Serviços.${white}"
sleep 3
echo


# 2.1.1 Verifique se o xinetd não está instalado (xinetd)
echo "" >> $doc1
echo "2.1.1 Verifique se o xinetd não está instalado (xinetd)" >> $doc1
echo -e "${yellow}2.1.1${white} Verifique se o xinetd não está instalado"
v1_xinetd=`rpm -q xinetd`
if [ $? -eq 1 ]; then
	echo "2.1.1 v1_xinetd okay" >> $doc1
	echo -e "${green}v1_xinetd okay${white}"
	okay=$((okay + 1))
else
	echo "2.1.1 Verificar v1_xinetd" >> $doc1
	echo -e "${red}2.1.1 Verificar v1_xinetd${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.1.1 Certifique-se de que a sincronização de tempo está em uso (chrony ntp)
echo "" >> $doc1
echo "2.2.1.1 Certifique-se de que a sincronização de tempo está em uso (chrony ntp)" >> $doc1
echo -e "${yellow}2.2.1.1${white} Certifique-se de que a sincronização de tempo está em uso"
v1_time_sync=`rpm -q chrony ntp`
if [ $? -eq 0 ]; then
	echo "2.2.1.1 v1_time_sync okay" >> $doc1
	echo -e "${green}v1_time_sync okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.1.1 Verificar v1_time_sync" >> $doc1
	echo -e "${red}2.2.1.1 Verificar v1_time_sync${white}"
	verificar=$((verificar + 1))
fi

v2_time_sync=`rpm -q ntp`
if [ $? -eq 0 ]; then
	echo "2.2.1.1 v2_time_sync okay" >> $doc1
	echo -e "${green}v2_time_sync okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.1.1 Verificar v2_time_sync" >> $doc1
	echo -e "${red}2.2.1.1 Verificar v2_time_sync${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.1.2 Verifique se o chrony está configurado (chrony set)
echo "" >> $doc1
echo "2.2.1.2 Verifique se o chrony está configurado (chrony set)" >> $doc1
echo -e "${yellow}2.2.1.2${white} Verifique se o chrony está configurado"
v1_chrony=`grep -E "^(server|pool)" /etc/chrony.conf`
if [ $? -eq 0 ]; then
	echo "2.2.1.2 v1_chrony okay" >> $doc1
	echo "$v1_chrony" >> $doc1
	echo -e "${green}v1_chrony okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.1.2 Verificar v1_chrony" >> $doc1
	echo -e "${red}2.2.1.2 Verificar v1_chrony${white}"
	verificar=$((verificar + 1))
fi

# para incluir aspas duplas dentro de um comando que já possui aspas duplas
# é necessário colocar a barra inversa [ \ ] antes das aspas

v2_chrony=`grep 'OPTIONS=\"-u chrony\"' /etc/sysconfig/chronyd`
if [ $? -eq 0 ]; then	
	echo "2.2.1.2 v2_chrony okay" >> $doc1
	echo -e "${green}v2_chrony okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.1.2 Verificar v2_chrony" >> $doc1
	echo -e "${red}2.2.1.2 Verificar v2_chrony${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.1.3 Certifique-se de que o ntp esteja configurado (ntp set)
echo "" >> $doc1
echo "2.2.1.3 Certifique-se de que o ntp esteja configurado (ntp set)" >> $doc1
echo -e "${yellow}2.2.1.3${white} Certifique-se de que o ntp esteja configurado"
v1_ntp_set=`systemctl is-enabled ntpd > /dev/null 2>&1` | grep 'enabled'
if [ $? -eq 0 ]; then
	echo "2.2.1.3 v1_ntp_set okay" >> $doc1
	echo -e "${green}v1_ntp_set okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.1.3 Verificar v1_ntp_set" >> $doc1
	echo -e "${red}2.2.1.3 Verificar v1_ntp_set${white}"
	verificar=$((verificar + 1))
fi

v2_ntp_set0=`ls /etc/ntp.conf > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	v2_ntp_set=`egrep "^restrict\s+-4\s+default\s+kod\s+nomodify\s+notrap\s+nopeer\s+noquery" /etc/ntp.conf `
	if [ $? -eq 0 ]; then
		echo "2.2.1.3 v2ntp_set okay" >> $doc1
		echo -e "${green}v2_ntp_set okay${white}"
		okay=$((okay + 1))
	else
		echo "2.2.1.3 Verificar v2_ntp_set" >> $doc1
		echo -e "${red}2.2.1.3 Verificar v2_ntp_set${white}"
		verificar=$((verificar + 1))
	fi

	v2_ntp_set2=`egrep "^restrict\s+-6\s+default\s+kod\s+nomodify\s+notrap\s+nopeer\s+noquery" /etc/ntp.conf`
	if [ $? -eq 0 ]; then
		echo "2.2.1.3 v2_ntp_set2 okay" >> $doc1
		echo -e "${green}v2_ntp_set2 okay${white}"
		okay=$((okay + 1))
	else
		echo "2.2.1.3 Verificar v2_ntp_set2" >> $doc1
		echo -e "${red}2.2.1.3 Verificar v2_ntp_set2${white}"
		verificar=$((verificar + 1))
	fi

	v3_ntp_set=`grep -E '^(server|pool)' /etc/ntp.conf`
	if [ $? -eq 0 ]; then
		echo "2.2.1.3 v1_ntp_set okay" >> $doc1
		echo -e "${green}v3_ntp_set okay${white}"
		okay=$((okay + 1))
	else
		echo "2.2.1.3 Verificar v3_ntp_set" >> $doc1
		echo -e "${red}2.2.1.3 Verificar v3_ntp_set${white}"
		verificar=$((verificar + 1))
	fi

else
	echo "2.2.1.3 Verificar v3 e v2_ntp_set 1 e 2" >> $doc1
	echo -e "${red}2.2.1.3 Verificar v3 e v2_ntp_set 1 e 2${white}"
	verificar=$((verificar + 3))
fi

v4_ntp_set=`egrep "^OPTIONS=\"-u\s+ntp:ntp\"" /etc/sysconfig/ntpd > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "2.2.1.3 v4_ntp_set okay" >> $doc1
	echo -e "${green}v3_ntp_set okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.1.3 Verificar v4_ntp_set" >> $doc1
	echo -e "${red}2.2.1.3 Verificar v4_ntp_set${white}"
	verificar=$((verificar + 1))
fi

v5_ntp_set=`egrep "^ExecStart=/usr/sbin/ntpd\s+-u\s+ntp:ntp" /usr/lib/systemd/system/ntpd.service > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "2.2.1.3 v5_ntp_set okay" >> $doc1
	echo -e "${green}v5_ntp_set okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.1.3 Verificar v5_ntp_set" >> $doc1
	echo -e "${red}2.2.1.3 Verificar v5_ntp_set${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.2 Certifique-se de que os componentes do X11 Server não estejam instalados (x11_set)
echo "" >> $doc1
echo "2.2.2 Certifique-se de que os componentes do X11 Server não estejam instalados (x11_set)" >> $doc1
echo -e "${yellow}2.2.2${white} Certifique-se de que os componentes do X11 Server não estejam instalados"
v1_x11_set=`rpm -q xorg-x11-server*`
if [ $? -eq 1 ]; then
	echo "2.2.2 v1_x11_set okay" >> $doc1
	echo -e "${green}v1_x11_set okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.2 Verificar v1_x11_set" >> $doc1
	echo -e "${red}2.2.2 Verificar v1_x11_set${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.3 Verifique se o Avahi Server não está instalado (avahi set)
echo "" >> $doc1
echo "2.2.3 Verifique se o Avahi Server não está instalado (avahi set)" >> $doc1
echo -e "${yellow}2.2.3${white} Verifique se o Avahi Server não está instalado"
v1_avahi_set=`rpm -q avahi`
if [ $? -eq 1 ]; then
	echo "2.2.3 v1_avahi_set okay" >> $doc1
	echo -e "${green}v1_avahi_set okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.3 Verificar v1_avahi_set" >> $doc1
	echo -e "${red}2.2.3 Verificar v1_avahi_set${white}"
	verificar=$((verificar + 1))
fi

v2_avahi_autoipd_set=`rpm -q avahi-autoipd`
if [ $? -eq 1 ]; then
	echo "2.2.3 v2_avahi_autoipd_set okay" >> $doc1
	echo -e "${green}v2_avahi_autoipd_set okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.3 Verificar v2_avahi_autoipd_set" >> $doc1
	echo -e "${red}2.2.3 Verificar v2_avahi_autoipd_set${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.4 Certifique-se de que serviço CUPS não esteja instalado (cups)
echo "" >> $doc1
echo "2.2.4 Certifique-se de que serviço CUPS não esteja instalado (cups)" >> $doc1
echo -e "${yellow}2.2.4${white} Certifique-se de que serviço CUPS não esteja instalado"
v1_cups=`rpm -q cups`
if [ $? -eq 1 ]; then
	echo "2.2.4 v1_cups okay" >> $doc1
	echo -e "${green}v1_cups okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.4 Verificar v1_cups" >> $doc1
	echo -e "${red}2.2.4 Verificar v1_cups${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.5 Certifique-se de que o servidor DHCP não esteja instalado (dhcp)
echo "" >> $doc1
echo "2.2.5 Certifique-se de que o servidor DHCP não esteja instalado (dhcp)" >> $doc1
echo -e "${yellow}2.2.5${white} Certifique-se de que o servidor DHCP não esteja instalado"
v1_dhcp=`rpm -q dhcp`
if [ $? -eq 1 ]; then
	echo "2.2.5 v1_dhcp okay" >> $doc1
	echo -e "${green}v1_dhcp okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.5 Verificar v1_dhcp" >> $doc1
	echo -e "${red}2.2.5 Verificar v1_dhcp${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.6 Certifique-se de que o servidor LDAP não esteja instalado (ldap)
echo "" >> $doc1
echo "2.2.6 Certifique-se de que o servidor LDAP não esteja instalado (ldap)" >> $doc1
echo -e "${yellow}2.2.6${white} Certifique-se de que o servidor LDAP não esteja instalado"
v1_ldap=`rpm -q openldap-servers`
if [ $? -eq 1 ]; then
	echo "2.2.6 v1_ldap okay" >> $doc1
	echo -e "${green}v1_ldap okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.6 Verificar v1_ldap" >> $doc1
	echo -e "${red}2.2.6 Verificar v1_ldap${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.7 Certifique-se de que o servidor DNS não esteja instalado (bind dns)
echo "" >> $doc1
echo "2.2.7 Certifique-se de que o servidor DNS não esteja instalado (bind dns)" >> $doc1
echo -e "${yellow}2.2.7${white} Certifique-se de que o servidor DNS não esteja instalado"
v1_bind_dns=`rpm -q bind`
if [ $? -eq 1 ]; then
	echo "2.2.7 v1_bind_dns okay" >> $doc1
	echo -e "${green}v1_bind_dns okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.7 Verificar v1_bind_dns" >> $doc1
	echo -e "${red}2.2.7 Verificar v1_bind_dns${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.8 Certifique-se de que o servidor FTP não esteja instalado (vsftpd)
echo "" >> $doc1
echo "2.2.8 Certifique-se de que o servidor FTP não esteja instalado (vsftpd)" >> $doc1
echo -e "${yellow}2.2.8${white} Certifique-se de que o servidor FTP não esteja instalado"
v1_vsftpd=`rpm -q vsftpd`
if [ $? -eq 1 ]; then
	echo "2.2.8 v1_vsftpd okay" >> $doc1
	echo -e "${green}v1_vsftpd okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.8 Verificar v1_vsftpd" >> $doc1
	echo -e "${red}2.2.8 Verificar v1_vsftpd${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.9 Certifique-se de que o servidor HTTP não esteja instalado (http)
echo "" >> $doc1
echo "2.2.9 Certifique-se de que o servidor HTTP não esteja instalado (http)" >> $doc1
echo -e "${yellow}2.2.9${white} Certifique-se de que o servidor HTTP não esteja instalado"
v1_http=`rpm -q httpd`
if [ $? -eq 1 ]; then
	echo "2.2.9 v1_http okay" >> $doc1
	echo -e "${green}v1_http okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.9 Verificar v1_http" >> $doc1
	echo -e "${red}2.2.9 Verificar v1_http${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.10 Certifique-se de que o serviço dovecot (IMAP e POP3) não esteja instalado (dovecot)
echo "" >> $doc1
echo "2.2.10 Certifique-se de que o serviço dovecot (IMAP e POP3) não esteja instalado (dovecot)" >> $doc1
echo -e "${yellow}2.2.10${white} Certifique-se de que o serviço dovecot (IMAP e POP3) não esteja instalado"
v1_dovecot=`rpm -q dovecot`
if [ $? -eq 1 ]; then
	echo "2.2.10 v1_dovecot okay" >> $doc1
	echo -e "${green}v1_dovecot okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.10 Verificar v1_dovecot" >> $doc1
	echo -e "${red}2.2.10 Verificar v1_dovecot${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.11 Verifique se o Samba não está instalado (samba)
echo "" >> $doc1
echo "2.2.11 Verifique se o Samba não está instalado (samba)" >> $doc1
echo -e "${yellow}2.2.11${white} Verifique se o Samba não está instalado"
v1_samba=`rpm -q samba`
if [ $? -eq 1 ]; then
	echo "2.2.11 v1_samba okay" >> $doc1
	echo -e "${green}v1_samba okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.11 Verificar v1_samba" >> $doc1
	echo -e "${red}2.2.11 Verificar v1_samba${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.12 Certifique-se de que o Squid não esteja instalado (squid)
echo "" >> $doc1
echo "2.2.12 Certifique-se de que o Squid não esteja instalado (squid)" >> $doc1
echo -e "${yellow}2.2.12${white} Certifique-se de que o Squid não esteja instalado"
v1_squid=`rpm -q squid`
if [ $? -eq 1 ]; then
	echo "2.2.12 v1_squid okay" >> $doc1
	echo -e "${green}v1_squid okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.12 Verificar v1_squid" >> $doc1
	echo -e "${red}2.2.12 Verificar v1_squid${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.13 Verifique se o net-snmp não está instalado (snmp)
echo "" >> $doc1
echo "2.2.13 Verifique se o net-snmp não está instalado (snmp)" >> $doc1
echo -e "${yellow}2.2.13${white} Verifique se o net-snmp não está instalado"
v1_snmp=`rpm -q net-snmp`
if [ $? -eq 1 ]; then
	echo "2.2.13 v1_snmp okay" >> $doc1
	echo -e "${green}v1_snmp okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.13 Verificar v1_snmp" >> $doc1
	echo -e "${red}2.2.13 Verificar v1_snmp${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.14 Certifique-se de que o serviço ypserv (NIS) não esteja instalado (ypserv)
echo "" >> $doc1
echo "2.2.14 Certifique-se de que o serviço ypserv (NIS) não esteja instalado (ypserv)" >> $doc1
echo -e "${yellow}2.2.14${white} Certifique-se de que o serviço ypserv (NIS) não esteja instalado"
v1_ypserv=`rpm -q ypserv`
if [ $? -eq 1 ]; then
	echo "2.2.14 v1_ypserv okay" >> $doc1
	echo -e "${green}v1_ypserv okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.14 Verificar v1_ypserv" >> $doc1
	echo -e "${red}2.2.14 Verificar v1_ypserv${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.15 Certifique-se de que o servidor telnet não esteja instalado (telnet server)
echo "" >> $doc1
echo "2.2.15 Certifique-se de que o servidor telnet não esteja instalado (telnet server)" >> $doc1
echo -e "${yellow}2.2.15${white} Certifique-se de que o servidor telnet não esteja instalado"
v1_telnet_server=`rpm -q telnet-server`
if [ $? -eq 1 ]; then
	echo "2.2.15 v1_telnet_server okay" >> $doc1
	echo -e "${green}v1_telnet_server okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.15 Verificar v1_telnet_server" >> $doc1
	echo -e "${red}2.2.15 Verificar v1_telnet_server${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.16 Certifique-se de que o agente de transferência de correio esteja configurado somente para o modo local (mta)
echo "" >> $doc1
echo "2.2.16 Certifique-se de que o agente de transferência de correio esteja configurado somente para o modo local (mta)" >> $doc1
echo -e "${yellow}2.2.16${white} Certifique-se de que o agente de transferência de correio esteja configurado somente para o modo local"
v1_mta=`ss -lntu | grep -E ':25\s' | grep -E -v '\s(127.0.0.1|\[?::1\]?):25\s'`
if [ $? -eq 1 ]; then
	echo "2.2.16 v1_mta okay" >> $doc1
	echo -e "${green}v1_mta okay${white}"
	okay=$((okay + 1))
else
	echo "2.2.16 Verificar v1_mta" >> $doc1
	echo -e "${red}2.2.16 Verificar v1_mta${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.2.17 Certifique-se de que nfs-utils não esteja instalado ou que o serviço nfs-server esteja mascarado (nfs-utils)
echo "" >> $doc1
echo "2.2.17 Certifique-se de que nfs-utils não esteja instalado ou que o serviço nfs-server esteja mascarado (nfs-utils)" >> $doc1
echo -e "${yellow}2.2.17${white} Certifique-se de que nfs-utils não esteja instalado ou que o serviço nfs-server esteja mascarado"
v1_nfs_utils=`rpm -q nfs-utils`
if [ $? -eq 1 ]; then
	echo "2.2.17 v1_nfs_utils okay (não está instalado)" >> $doc1
	echo -e "${green}v1_nfs_utils okay${white}"
	okay=$((okay + 1))
elif
	v2_nfs_utils=`systemctl is-enabled nfs-server | grep "masked"`
	[ $? -eq 0 ]; then
		echo "2.2.17 v2_nfs_utils okay (está mascarado)" >> $doc1
		echo -e "${green}v2_nfs_utils okay${white}"
		okay=$((okay + 1))
else
	echo "2.2.17 Verificar v1 e v2_nfs_utils" >> $doc1
	echo -e "${red}2.2.17 Verificar v1 e v2_nfs_utils${white}"
	verificar=$((verificar + 2))
fi

echo


# 2.2.18 Certifique-se de que o rpcbind não esteja instalado ou que os serviços do rpcbind estejam mascarados (rcpbind)
echo "" >> $doc1
echo "2.2.18 Certifique-se de que o rpcbind não esteja instalado ou que os serviços do rpcbind estejam mascarados (rcpbind)" >> $doc1
echo -e "${yellow}2.2.18${white} Certifique-se de que o rpcbind não esteja instalado ou que os serviços do rpcbind estejam mascarados"
v1_rcpbind=`rpm -q rpcbind`
if [ $? -eq 1 ]; then
	echo "2.2.18 v1_rcpbind okay (não está instalado)" >> $doc1
	echo -e "${green}v1_rcpbind okay${white}"
	okay=$((okay + 1))
elif
	v2_rcpbind=`systemctl is-enabled rpcbind | grep 'masked'`
	[ $? -eq 0 ]; then
		echo "2.2.18 v2_rcpbind okay (está mascarado)" >> $doc1
		echo -e "${green}v2_rcpbind okay${white}"
		okay=$((okay + 1))
elif 
	v3_rcpbind=`systemctl is-enabled rpcbind.socket | grep 'masked'`
	[ $? -eq 0 ]; then
		echo "2.2.18 v3_rcpbind okay (está com socket mascarado)" >> $doc1
		echo -e "${green}v3_rcpbind okay${white}"
		okay=$((okay + 1))
else
	echo "2.2.18 Verificar v1, v2 e v3_rcpbind" >> $doc1
	echo -e "${red}2.2.18 Verificar v1, v2 e v3_rcpbind${white}"
	verificar=$((verificar + 3))
fi

echo


# 2.2.19 Verifique se o rsync não está instalado ou se o serviço rsyncd está mascarado (rsync)
echo "" >> $doc1
echo "2.2.19 Verifique se o rsync não está instalado ou se o serviço rsyncd está mascarado (rsync)" >> $doc1
echo -e "${yellow}2.2.19${white} Verifique se o rsync não está instalado ou se o serviço rsyncd está mascarado"
v1_rsync=`rpm -q rsync`
if [ $? -eq 1 ]; then
	echo "2.2.19 v1_rsync okay" >> $doc1
	echo -e "${green}v1_rsync okay${white}"
	okay=$((okay + 1))
elif 
    v2_rsync=`systemctl is-enabled rsyncd | grep "masked"`
        [ $? -eq 0 ]; then
		echo "2.2.19 v2_rsync okay" >> $doc1
		echo -e "${green}v2_rsync okay${white}"
		okay=$((okay + 1))
else
	echo "2.2.19 Verificar v1 e v2_rsync" >> $doc1
	echo -e "${red}2.2.19 Verificar v1 e v2_rsync${white}"
	verificar=$((verificar + 2))
fi

echo


# 2.3.1 Certifique-se de que o serviço ypbind (cliente NIS) não esteja instalado (ypbind)
echo "" >> $doc1
echo "2.3.1 Certifique-se de que o serviço ypbind (cliente NIS) não esteja instalado (ypbind)" >> $doc1
echo -e "${yellow}2.3.1${white} Certifique-se de que o serviço ypbind (cliente NIS) não esteja instalado"
v1_ypbind=`rpm -q ypbind`
if [ $? -eq 1 ]; then
	echo "2.3.1 v1_ypbind okay" >> $doc1
	echo -e "${green}v1_ypbind okay${white}"
	okay=$((okay + 1))
else
	echo "2.3.1 Verificar v1_ypbind" >> $doc1
	echo -e "${red}2.3.1 Verificar v1_ypbind${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.3.2 Certifique-se de que o rsh cliente não esteja instalado (rsh)
echo "" >> $doc1
echo "2.3.2 Certifique-se de que o rsh cliente não esteja instalado (rsh)" >> $doc1
echo -e "${yellow}2.3.2${white} Certifique-se de que o rsh cliente não esteja instalado"
v1_rsh=`rpm -q rsh`
if [ $? -eq 1 ]; then
	echo "2.3.2 v1_rsh okay" >> $doc1
	echo -e "${green}v1_rsh okay${white}"
	okay=$((okay + 1))
else
	echo "2.3.2 Verificar v1_rsh" >> $doc1
	echo -e "${red}2.3.2 Verificar v1_rsh${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.3.3 Certifique-se de que o talk client não está instalado (talk client)
echo "" >> $doc1
echo "2.3.3 Certifique-se de que o talk client não está instalado (talk client)" >> $doc1
echo -e "${yellow}2.3.3${white} Certifique-se de que o talk client não está instalado"
v1_talk=`rpm -q talk`
if [ $? -eq 1 ]; then
	echo "2.3.3 v1_talk okay" >> $doc1
	echo -e "${green}v1_talk okay${white}"
	okay=$((okay + 1))
else
	echo "2.3.3 Verificar v1_talk" >> $doc1
	echo -e "${red}2.3.3 Verificar v1_talk${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.3.4 Certifique-se de que o cliente telnet não esteja instalado (telnet)
echo "" >> $doc1
echo "2.3.4 Certifique-se de que o cliente telnet não esteja instalado (telnet)" >> $doc1
echo -e "${yellow}2.3.4${white} Certifique-se de que o cliente telnet não esteja instalado"
v1_telnet=`rpm -q telnet`
if [ $? -eq 1 ]; then
	echo "2.3.4 v1_telnet okay" >> $doc1
	echo -e "${green}v1_telnet okay${white}"
	okay=$((okay + 1))
else
	echo "2.3.4 Verificar v1_telnet" >> $doc1
	echo -e "${red}2.3.4 Verificar v1_telnet${white}"
	verificar=$((verificar + 1))
fi

echo


# 2.3.5 Certifique-se de que o cliente LDAP não esteja instalado (ldap clients)
echo "" >> $doc1
echo "2.3.5 Certifique-se de que o cliente LDAP não esteja instalado (ldap clients)" >> $doc1
echo -e "${yellow}2.3.5${white} Certifique-se de que o cliente LDAP não esteja instalado"
v1_ldap=`rpm -q openldap-clients`
if [ $? -eq 1 ]; then
	echo "2.3.5 v1_ldap okay" >> $doc1
	echo -e "${green}v1_ldap okay${white}"
	okay=$((okay + 1))
else
	echo "2.3.5 Verificar v1_ldap" >> $doc1
	echo -e "${red}2.3.5 Verificar v1_ldap${white}"
	verificar=$((verificar + 1))
fi

echo


echo "" >> $doc1
echo "2. Verificação dos Serviços concluída." >> $doc1
echo -e "${purple}2. Verificação dos Serviços concluída.${white}"
sleep 3
echo 
echo "" >> $doc1
echo "3. Iniciando verificação de Configurações de Rede." >> $doc1
echo -e "${yellow}3. Iniciando verificação de Configurações de Rede.${white}"
sleep 4
echo


# 3.1.1 Verificar se IPv6 está desabilitado (IPv6 off)
echo "" >> $doc1
echo "3.1.1 Verificar se IPv6 está desabilitado (IPv6 off)" >> $doc1
echo -e "${yellow}3.1.1${white} Verificar se IPv6 está desabilitado"
v0_IPv6_off=`ip add | grep inet6`
if [ $? -eq 0 ]; then
	v1_IPv6_off=`grep "^\s*linux" /boot/grub2/grub.cfg | grep -v ipv6.disable=1 > /dev/null 2>&1`
	if [ $? -eq 1 ]; then
		echo "3.1.1 v1_IPv6_off okay" >> $doc1
		echo -e "${green}v1_IPv6_off okay${white}"
		okay=$((okay + 1))
	else
		echo "3.1.1 Verificar v1_IPv6_off" >> $doc1
		echo -e "${red}3.1.1 Verificar v1_IPv6_off${white}"
		verificar=$((verificar + 1))
	fi

	v2_IPv6_off=`sysctl net.ipv6.conf.all.disable_ipv6 | grep 'net.ipv6.conf.all.disable_ipv6 = 1'`
	if [ $? -eq 0 ]; then
		echo "3.1.1 v2_IPv6_off okay" >> $doc1
		echo -e "${green}v2_IPv6_off okay${white}"
		okay=$((okay + 1))
	else
		echo "3.1.1 Verificar v2_IPv6_off" >> $doc1
		echo -e "${red}3.1.1 Verificar v2_IPv6_off${white}"
		verificar=$((verificar + 1))
	fi

	v3_IPv6_off=`sysctl net.ipv6.conf.default.disable_ipv6 | grep 'net.ipv6.conf.default.disable_ipv6 = 1'`
	if [ $? -eq 0 ]; then
		echo "3.1.1 v3_IPv6_off okay" >> $doc1
		echo -e "${green}v3_IPv6_off okay${white}"
		okay=$((okay + 1))
	else
		echo "3.1.1 Verificar v3_IPv6_off" >> $doc1
		echo -e "${red}3.1.1 Verificar v3_IPv6_off${white}"
		verificar=$((verificar + 1))
	fi

	v4_IPv6_off=`grep -E "^\s*net\.ipv6\.conf\.(all|default)\.disable_ipv6\s*=\s*1\b(\s+#.*)?$" /etc/sysctl.conf /etc/sysctl.d/*.conf`
	if [ $? -eq 0 ]; then
		echo "3.1.1 v4_IPv6_off okay" >> $doc1
		echo -e "${green}v4_IPv6_off okay${white}"
		okay=$((okay + 1))
	else
		echo "3.1.1 Verificar v4_IPv6_off" >> $doc1
		echo -e "${red}3.1.1 Verificar v4_IPv6_off${white}"
		verificar=$((verificar + 1))
	fi

else
	echo "3.1.1 IPv6_off okay" >> $doc1
	echo -e "${green}IPv6_off okay${white}"
	okay=$((okay + 4))
fi

echo


# 3.1.2 Certifique-se de que as interfaces sem fio estejam desabilitadas
echo "" >> $doc1
echo "3.1.2 Certifique-se de que as interfaces sem fio estejam desabilitadas" >> $doc1
echo -e "${yellow}3.1.2${white} Certifique-se de que as interfaces sem fio estejam desabilitadas"
if command -v nmcli >/dev/null 2>&1 ; then
		if nmcli radio all | grep -Eq '\s*\S+\s+disabled\s+\S+\s+disabled\b'; then
			echo "3.1.2 Wireless está desativado, okay" >> $doc1
			echo -e "${green}3.1.2 Wireless está desativado, okay${white}"
			okay=$((okay + 1))
		else 
			nmcli radio all >> $doc1
			verificar=$((verificar + 1))
			echo "3.1.2 Verificar redes sem fio" >> $doc1
			echo -e "${red}3.1.2 Verificar redes sem fio.${white}"
		fi
elif [ -n "$(find /sys/class/net/*/ -type d -name wireless)" ]; then
t=0
mname=$(for driverdir in $(find /sys/class/net/*/ -type d -name wireless | xargs -0 dirname); do basename "$(readlink -f "$driverdir"/device/driver/module)";done | sort -u)
for dm in $mname; do
if grep -Eq "^\s*install\s+$dm\s+/bin/(true|false)" 
/etc/modprobe.d/*.conf; then
/bin/true
else
echo "$dm is not disabled"
t=1
 fi
 done
 [ "$t" -eq 0 ] && echo "Wireless is not enabled"
else
 echo "3.1.2 Wireless está desativado, okay" >> $doc1
 echo -e "${green}3.1.2 Wireless está desativado, okay${white}"
 okay=$((okay + 1))
fi

echo


# 3.2.1 Certifique-se de que o encaminhamento de IP esteja desabilitado (IPv4)
echo "" >> $doc1
echo "3.2.1 Certifique-se de que o encaminhamento de IP esteja desabilitado (IPv4)" >> $doc1
echo -e "${yellow}3.2.1${white} Certifique-se de que o encaminhamento de IP esteja desabilitado (IPv4)"
v1_IPv4_forward_off=`sysctl net.ipv4.ip_forward | grep 'net.ipv4.ip_forward = 0'`
if [ $? -eq 0 ]; then
	echo "3.2.1 v1_IPv4_forward_off okay" >> $doc1
	echo -e "${green}v1_IPv4_forward_off okay${white}"
	okay=$((okay + 1))
else
	echo "3.2.1 Verificar v1_IPv4_forward_off" >> $doc1
	echo -e "${red}3.2.1 Verificar v1_IPv4_forward_off${white}"
	verificar=$((verificar + 1))
fi

v2_IPv4_forward_off=`grep -E -s "^\s*net\.ipv4\.ip_forward\s*=\s*1" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf`
if [ $? -eq 1 ]; then
	echo "3.2.1 v2_IPv4_forward_off okay" >> $doc1
	echo -e "${green}v2_IPv4_forward_off okay${white}"
	okay=$((okay + 1))
else
	echo "3.2.1 Verificar v2_IPv4_forward_off" >> $doc1
	echo -e "${red}3.2.1 Verificar v2_IPv4_forward_off${white}"
	verificar=$((verificar + 1))
fi

echo


# 3.2.1 Certifique-se de que o encaminhamento de IP esteja desabilitado (IPv6)
echo "" >> $doc1
echo "3.2.1 Certifique-se de que o encaminhamento de IP esteja desabilitado (IPv6)" >> $doc1
echo -e "${yellow}3.2.1${white} Certifique-se de que o encaminhamento de IP esteja desabilitado (IPv6)"
v0_IPv6_off=`ip add | grep inet6`
if [ $? -eq 0 ]; then
	v1_IPv6_forward_off=`sysctl net.ipv6.conf.all.forwarding | grep 'net.ipv6.conf.all.forwarding = 0'`
	if [ $? -eq 0 ]; then
		echo "3.2.1 v1_IPv6_forward_off okay" >> $doc1
		echo -e "${green}v1_IPv6_forward_off okay${white}"
		okay=$((okay + 1))
	else
		echo "3.2.1 Verificar v1_IPv6_forward_off" >> $doc1
		echo -e "${red}3.2.1 Verificar v1_IPv6_forward_off${white}"
		verificar=$((verificar + 1))
	fi

	v2_IPv6_forward_off=`grep -E -s "^\s*net\.ipv6\.conf\.all\.forwarding\s*=\s*1" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf`
	if [ $? -eq 1 ]; then
		echo "3.2.1 v2_IPv6_forward_off okay" >> $doc1
		echo -e "${green}v2_IPv6_forward_off okay${white}"
		okay=$((okay + 1))
	else
		echo "3.2.1 Verificar v2_IPv6_forward_off" >> $doc1
		echo -e "${red}3.2.1 Verificar v2_IPv6_forward_off${white}"
		verificar=$((verificar + 1))
	fi

else
	echo "3.2.1 IPv6_forward_off okay" >> $doc1
	echo -e "${green}IPv6_forward_off okay${white}"
	okay=$((okay + 2))
fi

echo


# 3.2.2 Certifique-se de que o envio de redirecionamento de pacote esteja desabilitado (icmp sending)
echo "" >> $doc1
echo "3.2.2 Certifique-se de que o envio de redirecionamento de pacote esteja desabilitado (icmp sending)" >> $doc1
echo -e "${yellow}3.2.2${white} Certifique-se de que o envio de redirecionamento de pacote esteja desabilitado"
v1_icmp_sending=`sysctl net.ipv4.conf.all.send_redirects | grep 'net.ipv4.conf.all.send_redirects = 0'`
if [ $? -eq 0 ]; then
	echo "3.2.2 v1_icmp_sending okay" >> $doc1
	echo -e "${green}v1_icmp_sending okay${white}"
	okay=$((okay + 1))
else
	echo "3.2.2 Verificar v1_icmp_sending" >> $doc1
	echo -e "${red}3.2.2 Verificar v1_icmp_sending${white}"
	verificar=$((verificar + 1))
fi

v2_icmp_sending=`sysctl net.ipv4.conf.default.send_redirects | grep 'net.ipv4.conf.default.send_redirects = 0'`
if [ "$v2_icmp_sending" == "net.ipv4.conf.default.send_redirects = 0" ]; then
	echo "3.2.2 v2_icmp_sending okay" >> $doc1
	echo -e "${green}v2_icmp_sending okay${white}"
	okay=$((okay + 1))
else
	echo "3.2.2 Verificar v2_icmp_sending" >> $doc1
	echo -e "${red}3.2.2 Verificar v2_icmp_sending${white}"
	verificar=$((verificar + 1))
fi

v3_icmp_sending=`grep 'net.ipv4.conf.all.send_redirects = 0' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "3.2.2 v3_icmp_sending okay" >> $doc1
	echo -e "${green}v3_icmp_sending okay${white}"
	okay=$((okay + 1))
else
	echo "3.2.2 Verificar v3_icmp_sending" >> $doc1
	echo -e "${red}3.2.2 Verificar v3_icmp_sending${white}"
	verificar=$((verificar + 1))
fi

v4_icmp_sending=`grep "net\.ipv4\.conf\.default\.send_redirects" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf > /dev/null 2>&1`
if [ $? -eq 0 ]; then
	echo "3.2.2 v4_icmp_sending okay" >> $doc1
	echo -e "${green}v4_icmp_sending okay${white}"
	okay=$((okay + 1))
else
	echo "3.2.2 Verificar v4_icmp_sending" >> $doc1
	echo -e "${red}3.2.2 Verificar v4_icmp_sending${white}"
	verificar=$((verificar + 1))
fi

echo

echo "" >> $doc1
echo "Execução da parte 1 do script para CentOS Linux 7 concluída com sucesso!!!" >> $doc1
echo -e "${green}Execução da parte 1 do script para CentOS Linux 7 concluída com sucesso!!!${white}"
echo
echo "" >> $doc1
echo "Relatório" >> $doc1
echo -e "Relatório"
echo "Itens conforme documentação: "$okay >> $doc1
echo -e "${blue}Itens conforme documentação: $okay${white}" 
echo "Itens que demandam verificação: "$verificar >> $doc1
echo -e "${yellow}Itens que demandam verificação: $verificar${white}"
